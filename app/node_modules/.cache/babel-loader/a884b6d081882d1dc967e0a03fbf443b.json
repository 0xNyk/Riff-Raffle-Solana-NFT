{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simulateTransaction = void 0;\n/** Copy of Connection.simulateTransaction that takes a commitment parameter. */\n\nfunction simulateTransaction(_x, _x2, _x3) {\n  return _simulateTransaction.apply(this, arguments);\n}\n\nfunction _simulateTransaction() {\n  _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, transaction, commitment) {\n    var signData, wireTransaction, encodedTransaction, config, args, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return connection._recentBlockhash( // @ts-ignore\n            connection._disableBlockhashCaching);\n\n          case 2:\n            transaction.recentBlockhash = _context.sent;\n            signData = transaction.serializeMessage(); // @ts-ignore\n\n            wireTransaction = transaction._serialize(signData);\n            encodedTransaction = wireTransaction.toString('base64');\n            config = {\n              encoding: 'base64',\n              commitment: commitment\n            };\n            args = [encodedTransaction, config]; // @ts-ignore\n\n            _context.next = 10;\n            return connection._rpcRequest('simulateTransaction', args);\n\n          case 10:\n            res = _context.sent;\n\n            if (!res.error) {\n              _context.next = 13;\n              break;\n            }\n\n            throw new Error('failed to simulate transaction: ' + res.error.message);\n\n          case 13:\n            return _context.abrupt(\"return\", res.result);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _simulateTransaction.apply(this, arguments);\n}\n\nexports.simulateTransaction = simulateTransaction;","map":null,"metadata":{},"sourceType":"script"}