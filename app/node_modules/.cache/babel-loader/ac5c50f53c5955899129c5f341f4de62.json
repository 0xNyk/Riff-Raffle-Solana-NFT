{"ast":null,"code":"var _jsxFileName = \"C:\\\\Riff-Raffle-Solana-NFT build 1-1\\\\app\\\\src\\\\pages\\\\admin\\\\AdminRaffleScreen\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, IconButton, Typography } from '@material-ui/core';\nimport { Refresh } from '@material-ui/icons';\nimport { SYSVAR_RECENT_BLOCKHASHES_PUBKEY } from '@solana/web3.js';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport Screen from '../../../components/layout/Screen';\nimport Spacer from '../../../components/Spacer';\nimport { useProgramApis } from '../../../hooks/useProgramApis';\nimport { useRafflesStore } from '../../../hooks/useRafflesStore';\nimport { txHandler } from '../../../lib/anchorUtils';\nimport { useStyles } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AdminRaffleScreen = () => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    id: raffleId\n  } = useParams();\n  const {\n    raffles,\n    updateRaffleById\n  } = useRafflesStore();\n  const {\n    draffleClient\n  } = useProgramApis();\n  const [currentRaffle, setCurrentRaffle] = useState();\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const raffle = raffles.get(raffleId);\n    if (raffle) setCurrentRaffle(raffle);\n  }, [raffles, raffleId]);\n  const revealWinners = useCallback(async () => {\n    await txHandler(() => draffleClient.rpc.revealWinners({\n      accounts: {\n        raffle: raffleId,\n        recentBlockhashes: SYSVAR_RECENT_BLOCKHASHES_PUBKEY\n      }\n    }), 'Raffle revealed');\n  }, [draffleClient, raffleId]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!currentRaffle) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [currentRaffle ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.headerContainer,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          children: [\"Entrants list (total \", currentRaffle.entrants.size, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => {\n            setLoading(true);\n            updateRaffleById(raffleId);\n            setLoading(false);\n          },\n          children: /*#__PURE__*/_jsxDEV(Refresh, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: revealWinners,\n          variant: \"contained\",\n          children: \"Reveal winners\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Spacer, {\n        height: '20px'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), [...currentRaffle.entrants.entries()].map(([wallet, tickets]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.entrantRow,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: [wallet, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: tickets.tickets.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)]\n      }, wallet, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      children: \"No entrants\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Spacer, {\n      height: '50px'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AdminRaffleScreen, \"AsBjNHktWNE/oArD0vtp7A/n4gU=\", false, function () {\n  return [useStyles, useParams, useRafflesStore, useProgramApis];\n});\n\n_c = AdminRaffleScreen;\n\nconst AdminRaffleScreenWithLayout = () => /*#__PURE__*/_jsxDEV(Screen, {\n  children: /*#__PURE__*/_jsxDEV(AdminRaffleScreen, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 92,\n  columnNumber: 3\n}, this);\n\n_c2 = AdminRaffleScreenWithLayout;\nexport default AdminRaffleScreenWithLayout;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AdminRaffleScreen\");\n$RefreshReg$(_c2, \"AdminRaffleScreenWithLayout\");","map":{"version":3,"sources":["C:/Riff-Raffle-Solana-NFT build 1-1/app/src/pages/admin/AdminRaffleScreen/index.tsx"],"names":["Button","IconButton","Typography","Refresh","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","useCallback","useEffect","useState","useParams","Screen","Spacer","useProgramApis","useRafflesStore","txHandler","useStyles","AdminRaffleScreen","classes","id","raffleId","raffles","updateRaffleById","draffleClient","currentRaffle","setCurrentRaffle","loading","setLoading","raffle","get","revealWinners","rpc","accounts","recentBlockhashes","root","headerContainer","entrants","size","entries","map","wallet","tickets","entrantRow","toString","AdminRaffleScreenWithLayout"],"mappings":"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","sourcesContent":["import { Button, IconButton, Typography } from '@material-ui/core';\r\nimport { Refresh } from '@material-ui/icons';\r\nimport { SYSVAR_RECENT_BLOCKHASHES_PUBKEY } from '@solana/web3.js';\r\nimport { FC, useCallback, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\n\r\nimport Screen from '../../../components/layout/Screen';\r\nimport Spacer from '../../../components/Spacer';\r\nimport { useProgramApis } from '../../../hooks/useProgramApis';\r\nimport { useRafflesStore } from '../../../hooks/useRafflesStore';\r\nimport { txHandler } from '../../../lib/anchorUtils';\r\nimport { Raffle } from '../../../lib/types';\r\nimport { useStyles } from './styles';\r\n\r\nconst AdminRaffleScreen: FC = () => {\r\n  const classes = useStyles();\r\n  const { id: raffleId } = useParams<{ id: string }>();\r\n  const { raffles, updateRaffleById } = useRafflesStore();\r\n  const { draffleClient } = useProgramApis();\r\n\r\n  const [currentRaffle, setCurrentRaffle] = useState<Raffle>();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const raffle = raffles.get(raffleId);\r\n    if (raffle) setCurrentRaffle(raffle);\r\n  }, [raffles, raffleId]);\r\n\r\n  const revealWinners = useCallback(async () => {\r\n    await txHandler(\r\n      () =>\r\n        draffleClient.rpc.revealWinners({\r\n          accounts: {\r\n            raffle: raffleId,\r\n            recentBlockhashes: SYSVAR_RECENT_BLOCKHASHES_PUBKEY\r\n          }\r\n        }),\r\n        'Raffle revealed'\r\n    )\r\n  }, [draffleClient, raffleId]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={classes.root}>\r\n        <Typography variant=\"h3\">Loading...</Typography>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!currentRaffle) return null;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {currentRaffle ? (\r\n        <>\r\n          <div className={classes.headerContainer}>\r\n            <Typography variant=\"h3\">\r\n              Entrants list (total {currentRaffle.entrants.size})\r\n            </Typography>\r\n            <IconButton\r\n              onClick={() => {\r\n                setLoading(true);\r\n                updateRaffleById(raffleId);\r\n                setLoading(false);\r\n              }}\r\n            >\r\n              <Refresh />\r\n            </IconButton>\r\n            <Button onClick={revealWinners} variant=\"contained\">\r\n              Reveal winners\r\n            </Button>\r\n          </div>\r\n          <Spacer height={'20px'} />\r\n          {[...currentRaffle.entrants.entries()].map(([wallet, tickets]) => (\r\n            <div key={wallet} className={classes.entrantRow}>\r\n              <Typography variant=\"body1\">{wallet}: </Typography>\r\n              <Typography variant=\"body1\">\r\n                {tickets.tickets.toString()}\r\n              </Typography>\r\n            </div>\r\n          ))}\r\n        </>\r\n      ) : (\r\n        <Typography variant=\"h3\">No entrants</Typography>\r\n      )}\r\n      <Spacer height={'50px'} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AdminRaffleScreenWithLayout = () => (\r\n  <Screen>\r\n    <AdminRaffleScreen />\r\n  </Screen>\r\n);\r\n\r\nexport default AdminRaffleScreenWithLayout;\r\n"]},"metadata":{},"sourceType":"module"}