{"ast":null,"code":"export let PrizeType;\n\n(function (PrizeType) {\n  PrizeType[\"FT\"] = \"FT\";\n  PrizeType[\"NFTPicture\"] = \"NFTPicture\";\n})(PrizeType || (PrizeType = {}));","map":{"version":3,"sources":["C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT/app/src/lib/types.ts"],"names":["PrizeType"],"mappings":"AAkBA,WAAYA,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S","sourcesContent":["import { u64 } from '@solana/spl-token';\r\nimport { PublicKey } from '@solana/web3.js';\r\n\r\nexport interface Mint {\r\n  name: string;\r\n  publicKey: PublicKey;\r\n  logoUrl: string;\r\n  symbol: string;\r\n  decimals: number;\r\n}\r\n\r\nexport interface Entrant {\r\n  publicKey: PublicKey;\r\n  tickets: number[];\r\n}\r\n\r\nexport type EntrantsMap = Map<string, Entrant>;\r\n\r\nexport enum PrizeType {\r\n  FT = 'FT',\r\n  NFTPicture = 'NFTPicture',\r\n}\r\n\r\nexport interface PrizeBase {\r\n  address: PublicKey;\r\n  mint: Mint;\r\n  amount: u64;\r\n}\r\n\r\nexport type Prize = PrizeBase &\r\n  (\r\n    | { type: PrizeType.FT; meta: FungiblePrizeMeta }\r\n    | { type: PrizeType.NFTPicture; meta: PrizeNFTPictureMeta }\r\n  );\r\n\r\nexport interface FungiblePrizeMeta {\r\n  imageUri: string;\r\n}\r\n\r\nexport interface PrizeNFTPictureMeta {\r\n  name: string;\r\n  imageUri: string;\r\n}\r\n\r\nexport interface Proceeds {\r\n  address: PublicKey;\r\n  mint: Mint;\r\n  ticketPrice: u64;\r\n}\r\n\r\nexport interface RaffleMetaData {\r\n  name: string;\r\n  overviewImageUri?: string;\r\n  alternatePurchaseMints?: PublicKey[];\r\n}\r\n\r\nexport interface Raffle {\r\n  publicKey: PublicKey;\r\n  metadata: RaffleMetaData;\r\n  endTimestamp: Date;\r\n  proceeds: Proceeds;\r\n  entrants: EntrantsMap;\r\n  entrantsCap: number;\r\n  entrantsRaw: PublicKey[];\r\n  totalTickets: number;\r\n  entrantsAccountAddress: PublicKey;\r\n  prizes: Prize[];\r\n  randomness: number[] | null;\r\n  isEnded: boolean;\r\n}\r\n\r\nexport interface PaymentOption {\r\n  dispenserPriceIn: u64;\r\n  dispenserPriceOut: u64;\r\n  mint: Mint;\r\n}\r\n\r\nexport interface TokenAccountInfo {\r\n  address: PublicKey;\r\n  owner: PublicKey;\r\n  amount: u64;\r\n  mint: PublicKey;\r\n  state: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}