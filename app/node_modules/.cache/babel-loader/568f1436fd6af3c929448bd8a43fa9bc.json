{"ast":null,"code":"import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { PublicKey, SystemProgram, Transaction } from '@solana/web3.js';\nimport { VAULT_TOKEN_IN, VAULT_TOKEN_OUT } from '../../config/accounts';\nimport { DISPENSER_REGISTRY_ADDRESS } from '../../config/programIds';\nimport { wrappedSOL } from '../../config/tokenRegistry';\nimport { createOwnAssociatedTokenAccountInstruction } from '../accounts';\nexport const BUY_TICKETS_TX_FEE_LAMPORTS = 5;\nconst FEE_WALLET = new PublicKey('9pXY8HkCQd8M65haiNkyRTh8nmZpLeG9ska5QVDfKasE');\nexport const calculateBasketPrice = (ticketPrice, ticketAmount, paymentOption) => ticketPrice.muln(ticketAmount).mul(paymentOption.dispenserPriceIn).div(paymentOption.dispenserPriceOut);\nexport const buyTickets = async (draffleClient, dispenserClient, raffle, ticketAmount, paymentOption, buyerATAExists) => {\n  // Compute buyer ATA for tickets purchase\n  const buyerTokenAccount = await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, paymentOption.mint.publicKey, draffleClient.provider.wallet.publicKey);\n  let finalBuyerAccount = buyerTokenAccount;\n  let instructions = []; // Required for wSOL payment only because the associated amount is read from native lamports\n  // In other cases user cannot click \"BUY\" if no ATA (= not enough to buy), and won't hit `buyTicket`\n\n  if (paymentOption.mint.publicKey.toBase58() === wrappedSOL) {\n    if (!buyerATAExists) {\n      instructions.push(createOwnAssociatedTokenAccountInstruction(new PublicKey(wrappedSOL), buyerTokenAccount, draffleClient.provider.wallet.publicKey));\n    }\n\n    instructions.push(SystemProgram.transfer({\n      fromPubkey: draffleClient.provider.wallet.publicKey,\n      toPubkey: buyerTokenAccount,\n      lamports: calculateBasketPrice(raffle.proceeds.ticketPrice, ticketAmount, paymentOption).toNumber()\n    }));\n    instructions.push( // @ts-ignore\n    Token.createSyncNativeInstruction(TOKEN_PROGRAM_ID, buyerTokenAccount));\n  } // Get raffle proceeds token from dispenser if needed\n\n\n  if (paymentOption.mint.publicKey.toString() !== raffle.proceeds.mint.publicKey.toString()) {\n    const basketPrice = calculateBasketPrice(raffle.proceeds.ticketPrice, ticketAmount, paymentOption);\n    console.log(`Swapping ${basketPrice.toString()} ${paymentOption.mint.symbol} for ${raffle.proceeds.ticketPrice.muln(ticketAmount).toString()} ${raffle.proceeds.mint.symbol}`);\n    const buyerIntermediaryTokenAccount = await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, raffle.proceeds.mint.publicKey, draffleClient.provider.wallet.publicKey); // Safe amount requested, because only multiplied.\n    // Together with program-side logic, only consequence of potentially non-integer\n    // associated tokenIn amount is under-charging the user by remainder amount\n\n    instructions.push(dispenserClient.instruction.swap(raffle.proceeds.ticketPrice.muln(ticketAmount), {\n      accounts: {\n        registry: DISPENSER_REGISTRY_ADDRESS,\n        swapper: dispenserClient.provider.wallet.publicKey,\n        vaultTokenIn: VAULT_TOKEN_IN,\n        vaultTokenOut: VAULT_TOKEN_OUT,\n        buyerTokenInAccount: buyerTokenAccount,\n        buyerTokenOutAccount: buyerIntermediaryTokenAccount,\n        tokenProgram: TOKEN_PROGRAM_ID\n      }\n    }));\n    finalBuyerAccount = buyerIntermediaryTokenAccount;\n  } // LOOK HERE\n\n\n  instructions.push(draffleClient.instruction.buyTickets(ticketAmount, {\n    accounts: {\n      raffle: raffle.publicKey,\n      entrants: raffle.entrantsAccountAddress,\n      proceeds: raffle.proceeds.address,\n      buyerTokenAccount: finalBuyerAccount,\n      buyerTransferAuthority: draffleClient.provider.wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      feeAcc: FEE_WALLET\n    }\n  }));\n  return await draffleClient.provider.send(new Transaction().add(...instructions));\n};","map":{"version":3,"sources":["C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT/app/src/lib/actions/buyTickets.ts"],"names":["ASSOCIATED_TOKEN_PROGRAM_ID","Token","TOKEN_PROGRAM_ID","PublicKey","SystemProgram","Transaction","VAULT_TOKEN_IN","VAULT_TOKEN_OUT","DISPENSER_REGISTRY_ADDRESS","wrappedSOL","createOwnAssociatedTokenAccountInstruction","BUY_TICKETS_TX_FEE_LAMPORTS","FEE_WALLET","calculateBasketPrice","ticketPrice","ticketAmount","paymentOption","muln","mul","dispenserPriceIn","div","dispenserPriceOut","buyTickets","draffleClient","dispenserClient","raffle","buyerATAExists","buyerTokenAccount","getAssociatedTokenAddress","mint","publicKey","provider","wallet","finalBuyerAccount","instructions","toBase58","push","transfer","fromPubkey","toPubkey","lamports","proceeds","toNumber","createSyncNativeInstruction","toString","basketPrice","console","log","symbol","buyerIntermediaryTokenAccount","instruction","swap","accounts","registry","swapper","vaultTokenIn","vaultTokenOut","buyerTokenInAccount","buyerTokenOutAccount","tokenProgram","entrants","entrantsAccountAddress","address","buyerTransferAuthority","systemProgram","programId","feeAcc","send","add"],"mappings":"AAAA,SACEA,2BADF,EAEEC,KAFF,EAGEC,gBAHF,QAKO,mBALP;AAMA,SACEC,SADF,EAEEC,aAFF,EAGEC,WAHF,QAKO,iBALP;AAOA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,uBAAhD;AACA,SAASC,0BAAT,QAA2C,yBAA3C;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAKA,SAASC,0CAAT,QAA2D,aAA3D;AAGA,OAAO,MAAMC,2BAA2B,GAAG,CAApC;AACP,MAAMC,UAAU,GAAG,IAAIT,SAAJ,CAAc,8CAAd,CAAnB;AAEA,OAAO,MAAMU,oBAAoB,GAAG,CAClCC,WADkC,EAElCC,YAFkC,EAGlCC,aAHkC,KAKlCF,WAAW,CACRG,IADH,CACQF,YADR,EAEGG,GAFH,CAEOF,aAAa,CAACG,gBAFrB,EAGGC,GAHH,CAGOJ,aAAa,CAACK,iBAHrB,CALK;AAUP,OAAO,MAAMC,UAAU,GAAG,OACxBC,aADwB,EAExBC,eAFwB,EAGxBC,MAHwB,EAIxBV,YAJwB,EAKxBC,aALwB,EAMxBU,cANwB,KAOrB;AACH;AACA,QAAMC,iBAAiB,GAAG,MAAM1B,KAAK,CAAC2B,yBAAN,CAC9B5B,2BAD8B,EAE9BE,gBAF8B,EAG9Bc,aAAa,CAACa,IAAd,CAAmBC,SAHW,EAI9BP,aAAa,CAACQ,QAAd,CAAuBC,MAAvB,CAA8BF,SAJA,CAAhC;AAMA,MAAIG,iBAAiB,GAAGN,iBAAxB;AACA,MAAIO,YAAsC,GAAG,EAA7C,CATG,CAWH;AACA;;AACA,MAAIlB,aAAa,CAACa,IAAd,CAAmBC,SAAnB,CAA6BK,QAA7B,OAA4C1B,UAAhD,EAA4D;AAC1D,QAAI,CAACiB,cAAL,EAAqB;AACnBQ,MAAAA,YAAY,CAACE,IAAb,CACE1B,0CAA0C,CACxC,IAAIP,SAAJ,CAAcM,UAAd,CADwC,EAExCkB,iBAFwC,EAGxCJ,aAAa,CAACQ,QAAd,CAAuBC,MAAvB,CAA8BF,SAHU,CAD5C;AAOD;;AAEDI,IAAAA,YAAY,CAACE,IAAb,CACEhC,aAAa,CAACiC,QAAd,CAAuB;AACrBC,MAAAA,UAAU,EAAEf,aAAa,CAACQ,QAAd,CAAuBC,MAAvB,CAA8BF,SADrB;AAErBS,MAAAA,QAAQ,EAAEZ,iBAFW;AAGrBa,MAAAA,QAAQ,EAAE3B,oBAAoB,CAC5BY,MAAM,CAACgB,QAAP,CAAgB3B,WADY,EAE5BC,YAF4B,EAG5BC,aAH4B,CAApB,CAIR0B,QAJQ;AAHW,KAAvB,CADF;AAWAR,IAAAA,YAAY,CAACE,IAAb,EACE;AACAnC,IAAAA,KAAK,CAAC0C,2BAAN,CAAkCzC,gBAAlC,EAAoDyB,iBAApD,CAFF;AAID,GAvCE,CAyCH;;;AACA,MACEX,aAAa,CAACa,IAAd,CAAmBC,SAAnB,CAA6Bc,QAA7B,OACAnB,MAAM,CAACgB,QAAP,CAAgBZ,IAAhB,CAAqBC,SAArB,CAA+Bc,QAA/B,EAFF,EAGE;AACA,UAAMC,WAAW,GAAGhC,oBAAoB,CACtCY,MAAM,CAACgB,QAAP,CAAgB3B,WADsB,EAEtCC,YAFsC,EAGtCC,aAHsC,CAAxC;AAMA8B,IAAAA,OAAO,CAACC,GAAR,CACG,YAAWF,WAAW,CAACD,QAAZ,EAAuB,IACjC5B,aAAa,CAACa,IAAd,CAAmBmB,MACpB,QAAOvB,MAAM,CAACgB,QAAP,CAAgB3B,WAAhB,CAA4BG,IAA5B,CAAiCF,YAAjC,EAA+C6B,QAA/C,EAA0D,IAChEnB,MAAM,CAACgB,QAAP,CAAgBZ,IAAhB,CAAqBmB,MACtB,EALH;AAQA,UAAMC,6BAA6B,GAAG,MAAMhD,KAAK,CAAC2B,yBAAN,CAC1C5B,2BAD0C,EAE1CE,gBAF0C,EAG1CuB,MAAM,CAACgB,QAAP,CAAgBZ,IAAhB,CAAqBC,SAHqB,EAI1CP,aAAa,CAACQ,QAAd,CAAuBC,MAAvB,CAA8BF,SAJY,CAA5C,CAfA,CAsBA;AACA;AACA;;AACAI,IAAAA,YAAY,CAACE,IAAb,CACEZ,eAAe,CAAC0B,WAAhB,CAA4BC,IAA5B,CACE1B,MAAM,CAACgB,QAAP,CAAgB3B,WAAhB,CAA4BG,IAA5B,CAAiCF,YAAjC,CADF,EAEE;AACEqC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,QAAQ,EAAE7C,0BADF;AAER8C,QAAAA,OAAO,EAAE9B,eAAe,CAACO,QAAhB,CAAyBC,MAAzB,CAAgCF,SAFjC;AAGRyB,QAAAA,YAAY,EAAEjD,cAHN;AAIRkD,QAAAA,aAAa,EAAEjD,eAJP;AAKRkD,QAAAA,mBAAmB,EAAE9B,iBALb;AAMR+B,QAAAA,oBAAoB,EAAET,6BANd;AAORU,QAAAA,YAAY,EAAEzD;AAPN;AADZ,KAFF,CADF;AAiBA+B,IAAAA,iBAAiB,GAAGgB,6BAApB;AACD,GAxFE,CA0FH;;;AACAf,EAAAA,YAAY,CAACE,IAAb,CACEb,aAAa,CAAC2B,WAAd,CAA0B5B,UAA1B,CAAqCP,YAArC,EAAmD;AACjDqC,IAAAA,QAAQ,EAAE;AACR3B,MAAAA,MAAM,EAAEA,MAAM,CAACK,SADP;AAER8B,MAAAA,QAAQ,EAAEnC,MAAM,CAACoC,sBAFT;AAGRpB,MAAAA,QAAQ,EAAEhB,MAAM,CAACgB,QAAP,CAAgBqB,OAHlB;AAIRnC,MAAAA,iBAAiB,EAAEM,iBAJX;AAKR8B,MAAAA,sBAAsB,EAAExC,aAAa,CAACQ,QAAd,CAAuBC,MAAvB,CAA8BF,SAL9C;AAMR6B,MAAAA,YAAY,EAAEzD,gBANN;AAOR8D,MAAAA,aAAa,EAAE5D,aAAa,CAAC6D,SAPrB;AAQRC,MAAAA,MAAM,EAAEtD;AARA;AADuC,GAAnD,CADF;AAeA,SAAO,MAAMW,aAAa,CAACQ,QAAd,CAAuBoC,IAAvB,CACX,IAAI9D,WAAJ,GAAkB+D,GAAlB,CAAsB,GAAGlC,YAAzB,CADW,CAAb;AAGD,CApHM","sourcesContent":["import {\r\n  ASSOCIATED_TOKEN_PROGRAM_ID,\r\n  Token,\r\n  TOKEN_PROGRAM_ID,\r\n  u64,\r\n} from '@solana/spl-token';\r\nimport {\r\n  PublicKey,\r\n  SystemProgram,\r\n  Transaction,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nimport { VAULT_TOKEN_IN, VAULT_TOKEN_OUT } from '../../config/accounts';\r\nimport { DISPENSER_REGISTRY_ADDRESS } from '../../config/programIds';\r\nimport { wrappedSOL } from '../../config/tokenRegistry';\r\nimport {\r\n  DispenserProgram,\r\n  DraffleProgram,\r\n} from '../../providers/ProgramApisProvider';\r\nimport { createOwnAssociatedTokenAccountInstruction } from '../accounts';\r\nimport { PaymentOption, Raffle } from '../types';\r\n\r\nexport const BUY_TICKETS_TX_FEE_LAMPORTS = 5;\r\nconst FEE_WALLET = new PublicKey('9pXY8HkCQd8M65haiNkyRTh8nmZpLeG9ska5QVDfKasE');\r\n\r\nexport const calculateBasketPrice = (\r\n  ticketPrice: u64,\r\n  ticketAmount: number,\r\n  paymentOption: PaymentOption\r\n) =>\r\n  ticketPrice\r\n    .muln(ticketAmount)\r\n    .mul(paymentOption.dispenserPriceIn)\r\n    .div(paymentOption.dispenserPriceOut);\r\n\r\nexport const buyTickets = async (\r\n  draffleClient: DraffleProgram,\r\n  dispenserClient: DispenserProgram,\r\n  raffle: Raffle,\r\n  ticketAmount: number,\r\n  paymentOption: PaymentOption,\r\n  buyerATAExists: boolean\r\n) => {\r\n  // Compute buyer ATA for tickets purchase\r\n  const buyerTokenAccount = await Token.getAssociatedTokenAddress(\r\n    ASSOCIATED_TOKEN_PROGRAM_ID,\r\n    TOKEN_PROGRAM_ID,\r\n    paymentOption.mint.publicKey,\r\n    draffleClient.provider.wallet.publicKey\r\n  );\r\n  let finalBuyerAccount = buyerTokenAccount;\r\n  let instructions: TransactionInstruction[] = [];\r\n\r\n  // Required for wSOL payment only because the associated amount is read from native lamports\r\n  // In other cases user cannot click \"BUY\" if no ATA (= not enough to buy), and won't hit `buyTicket`\r\n  if (paymentOption.mint.publicKey.toBase58() === wrappedSOL) {\r\n    if (!buyerATAExists) {\r\n      instructions.push(\r\n        createOwnAssociatedTokenAccountInstruction(\r\n          new PublicKey(wrappedSOL),\r\n          buyerTokenAccount,\r\n          draffleClient.provider.wallet.publicKey\r\n        )\r\n      );\r\n    }\r\n\r\n    instructions.push(\r\n      SystemProgram.transfer({\r\n        fromPubkey: draffleClient.provider.wallet.publicKey,\r\n        toPubkey: buyerTokenAccount,\r\n        lamports: calculateBasketPrice(\r\n          raffle.proceeds.ticketPrice,\r\n          ticketAmount,\r\n          paymentOption\r\n        ).toNumber(),\r\n      })\r\n    );\r\n    instructions.push(\r\n      // @ts-ignore\r\n      Token.createSyncNativeInstruction(TOKEN_PROGRAM_ID, buyerTokenAccount)\r\n    );\r\n  }\r\n\r\n  // Get raffle proceeds token from dispenser if needed\r\n  if (\r\n    paymentOption.mint.publicKey.toString() !==\r\n    raffle.proceeds.mint.publicKey.toString()\r\n  ) {\r\n    const basketPrice = calculateBasketPrice(\r\n      raffle.proceeds.ticketPrice,\r\n      ticketAmount,\r\n      paymentOption\r\n    );\r\n\r\n    console.log(\r\n      `Swapping ${basketPrice.toString()} ${\r\n        paymentOption.mint.symbol\r\n      } for ${raffle.proceeds.ticketPrice.muln(ticketAmount).toString()} ${\r\n        raffle.proceeds.mint.symbol\r\n      }`\r\n    );\r\n\r\n    const buyerIntermediaryTokenAccount = await Token.getAssociatedTokenAddress(\r\n      ASSOCIATED_TOKEN_PROGRAM_ID,\r\n      TOKEN_PROGRAM_ID,\r\n      raffle.proceeds.mint.publicKey,\r\n      draffleClient.provider.wallet.publicKey\r\n    );\r\n\r\n    // Safe amount requested, because only multiplied.\r\n    // Together with program-side logic, only consequence of potentially non-integer\r\n    // associated tokenIn amount is under-charging the user by remainder amount\r\n    instructions.push(\r\n      dispenserClient.instruction.swap(\r\n        raffle.proceeds.ticketPrice.muln(ticketAmount),\r\n        {\r\n          accounts: {\r\n            registry: DISPENSER_REGISTRY_ADDRESS,\r\n            swapper: dispenserClient.provider.wallet.publicKey,\r\n            vaultTokenIn: VAULT_TOKEN_IN,\r\n            vaultTokenOut: VAULT_TOKEN_OUT,\r\n            buyerTokenInAccount: buyerTokenAccount,\r\n            buyerTokenOutAccount: buyerIntermediaryTokenAccount,\r\n            tokenProgram: TOKEN_PROGRAM_ID,\r\n          },\r\n        }\r\n      )\r\n    );\r\n\r\n    finalBuyerAccount = buyerIntermediaryTokenAccount;\r\n  }\r\n\r\n  // LOOK HERE\r\n  instructions.push(\r\n    draffleClient.instruction.buyTickets(ticketAmount, {\r\n      accounts: {\r\n        raffle: raffle.publicKey,\r\n        entrants: raffle.entrantsAccountAddress,\r\n        proceeds: raffle.proceeds.address,\r\n        buyerTokenAccount: finalBuyerAccount,\r\n        buyerTransferAuthority: draffleClient.provider.wallet.publicKey,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        feeAcc: FEE_WALLET,\r\n      },\r\n    })\r\n  );\r\n\r\n  return await draffleClient.provider.send(\r\n    new Transaction().add(...instructions)\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}