{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GetMultipleAccountsAndContextRpcResult = exports.getMultipleSolanaAccounts = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar superstruct_1 = require(\"superstruct\");\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nfunction getMultipleSolanaAccounts(_x, _x2) {\n  return _getMultipleSolanaAccounts.apply(this, arguments);\n}\n\nfunction _getMultipleSolanaAccounts() {\n  _getMultipleSolanaAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, publicKeys) {\n    var args, unsafeRes, res, accounts, _iterator, _step, account, value, executable, owner, lamports, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            args = [publicKeys.map(function (k) {\n              return k.toBase58();\n            }), {\n              commitment: 'recent'\n            }]; // @ts-ignore\n\n            _context.next = 3;\n            return connection._rpcRequest('getMultipleAccounts', args);\n\n          case 3:\n            unsafeRes = _context.sent;\n            res = exports.GetMultipleAccountsAndContextRpcResult(unsafeRes);\n\n            if (!res.error) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error('failed to get info about accounts ' + publicKeys.map(function (k) {\n              return k.toBase58();\n            }).join(', ') + ': ' + res.error.message);\n\n          case 7:\n            assert_1.default(typeof res.result !== 'undefined');\n            accounts = [];\n            _iterator = _createForOfIteratorHelper(res.result.value);\n            _context.prev = 10;\n\n            _iterator.s();\n\n          case 12:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 21;\n              break;\n            }\n\n            account = _step.value;\n            value = null;\n\n            if (res.result.value) {\n              executable = account.executable, owner = account.owner, lamports = account.lamports, data = account.data;\n              assert_1.default(data[1] === 'base64');\n              value = {\n                executable: executable,\n                owner: new web3_js_1.PublicKey(owner),\n                lamports: lamports,\n                data: Buffer.from(data[0], 'base64')\n              };\n            }\n\n            if (!(value === null)) {\n              _context.next = 18;\n              break;\n            }\n\n            throw new Error('Invalid response');\n\n          case 18:\n            accounts.push(value);\n\n          case 19:\n            _context.next = 12;\n            break;\n\n          case 21:\n            _context.next = 26;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](10);\n\n            _iterator.e(_context.t0);\n\n          case 26:\n            _context.prev = 26;\n\n            _iterator.f();\n\n            return _context.finish(26);\n\n          case 29:\n            return _context.abrupt(\"return\", accounts.map(function (account, idx) {\n              return {\n                publicKey: publicKeys[idx],\n                account: account\n              };\n            }));\n\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[10, 23, 26, 29]]);\n  }));\n  return _getMultipleSolanaAccounts.apply(this, arguments);\n}\n\nexports.getMultipleSolanaAccounts = getMultipleSolanaAccounts;\n\nfunction jsonRpcResult(resultDescription) {\n  var jsonRpcVersion = superstruct_1.struct.literal('2.0');\n  return superstruct_1.struct.union([superstruct_1.struct({\n    jsonrpc: jsonRpcVersion,\n    id: 'string',\n    error: 'any'\n  }), superstruct_1.struct({\n    jsonrpc: jsonRpcVersion,\n    id: 'string',\n    error: 'null?',\n    result: resultDescription\n  })]);\n}\n\nfunction jsonRpcResultAndContext(resultDescription) {\n  return jsonRpcResult({\n    context: superstruct_1.struct({\n      slot: 'number'\n    }),\n    value: resultDescription\n  });\n}\n\nvar AccountInfoResult = superstruct_1.struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?'\n});\nexports.GetMultipleAccountsAndContextRpcResult = jsonRpcResultAndContext(superstruct_1.struct.array([superstruct_1.struct.union(['null', AccountInfoResult])]));","map":null,"metadata":{},"sourceType":"script"}