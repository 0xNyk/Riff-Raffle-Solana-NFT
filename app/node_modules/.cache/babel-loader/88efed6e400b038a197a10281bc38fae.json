{"ast":null,"code":"import { utils } from '@project-serum/anchor';\nimport { TESTING } from './misc';\nimport { DISPENSER_PROGRAM_ID, DISPENSER_REGISTRY_ADDRESS } from './programIds';\nexport const ADMIN_ACCOUNTS = TESTING ? ['2zcTAzzHmvVPWjpFL5PnHhF6yutr5VXq61xueshhPwnU', 'AvXAPcZWzd2He45sKh1UgtByeycx3KyLMVi3XPMdxHpZ'] : ['86f5xSDrue8Zz4QfuMErURN3o393L72zA1J2WRsYeTGB', 'AvXAPcZWzd2He45sKh1UgtByeycx3KyLMVi3XPMdxHpZ'];\nexport const [VAULT_TOKEN_IN] = utils.publicKey.findProgramAddressSync([Buffer.from('vault_token_in'), DISPENSER_REGISTRY_ADDRESS.toBytes()], DISPENSER_PROGRAM_ID);\nconsole.log(`VAULT_TOKEN_IN: ${VAULT_TOKEN_IN.toBase58()}`);\nexport const [VAULT_TOKEN_OUT] = utils.publicKey.findProgramAddressSync([Buffer.from('vault_token_out'), DISPENSER_REGISTRY_ADDRESS.toBytes()], DISPENSER_PROGRAM_ID);\nconsole.log(`VAULT_TOKEN_OUT = ${VAULT_TOKEN_OUT.toBase58()}`);","map":{"version":3,"sources":["C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT/app/src/config/accounts.ts"],"names":["utils","TESTING","DISPENSER_PROGRAM_ID","DISPENSER_REGISTRY_ADDRESS","ADMIN_ACCOUNTS","VAULT_TOKEN_IN","publicKey","findProgramAddressSync","Buffer","from","toBytes","console","log","toBase58","VAULT_TOKEN_OUT"],"mappings":"AAAA,SAASA,KAAT,QAAsB,uBAAtB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,oBAAT,EAA+BC,0BAA/B,QAAiE,cAAjE;AAEA,OAAO,MAAMC,cAAc,GAAGH,OAAO,GACjC,CACE,8CADF,EAEE,8CAFF,CADiC,GAKjC,CACE,8CADF,EAEE,8CAFF,CALG;AAUP,OAAO,MAAM,CAACI,cAAD,IAAmBL,KAAK,CAACM,SAAN,CAAgBC,sBAAhB,CAC9B,CAACC,MAAM,CAACC,IAAP,CAAY,gBAAZ,CAAD,EAAgCN,0BAA0B,CAACO,OAA3B,EAAhC,CAD8B,EAE9BR,oBAF8B,CAAzB;AAIPS,OAAO,CAACC,GAAR,CAAa,mBAAkBP,cAAc,CAACQ,QAAf,EAA0B,EAAzD;AAEA,OAAO,MAAM,CAACC,eAAD,IAAoBd,KAAK,CAACM,SAAN,CAAgBC,sBAAhB,CAC/B,CAACC,MAAM,CAACC,IAAP,CAAY,iBAAZ,CAAD,EAAiCN,0BAA0B,CAACO,OAA3B,EAAjC,CAD+B,EAE/BR,oBAF+B,CAA1B;AAIPS,OAAO,CAACC,GAAR,CAAa,qBAAoBE,eAAe,CAACD,QAAhB,EAA2B,EAA5D","sourcesContent":["import { utils } from '@project-serum/anchor';\r\nimport { TESTING } from './misc';\r\nimport { DISPENSER_PROGRAM_ID, DISPENSER_REGISTRY_ADDRESS } from './programIds';\r\n\r\nexport const ADMIN_ACCOUNTS = TESTING\r\n  ? [\r\n      '2zcTAzzHmvVPWjpFL5PnHhF6yutr5VXq61xueshhPwnU',\r\n      'AvXAPcZWzd2He45sKh1UgtByeycx3KyLMVi3XPMdxHpZ',\r\n    ]\r\n  : [\r\n      '86f5xSDrue8Zz4QfuMErURN3o393L72zA1J2WRsYeTGB',\r\n      'AvXAPcZWzd2He45sKh1UgtByeycx3KyLMVi3XPMdxHpZ',\r\n    ];\r\n\r\nexport const [VAULT_TOKEN_IN] = utils.publicKey.findProgramAddressSync(\r\n  [Buffer.from('vault_token_in'), DISPENSER_REGISTRY_ADDRESS.toBytes()],\r\n  DISPENSER_PROGRAM_ID\r\n);\r\nconsole.log(`VAULT_TOKEN_IN: ${VAULT_TOKEN_IN.toBase58()}`);\r\n\r\nexport const [VAULT_TOKEN_OUT] = utils.publicKey.findProgramAddressSync(\r\n  [Buffer.from('vault_token_out'), DISPENSER_REGISTRY_ADDRESS.toBytes()],\r\n  DISPENSER_PROGRAM_ID\r\n);\r\nconsole.log(`VAULT_TOKEN_OUT = ${VAULT_TOKEN_OUT.toBase58()}`);\r\n"]},"metadata":{},"sourceType":"module"}