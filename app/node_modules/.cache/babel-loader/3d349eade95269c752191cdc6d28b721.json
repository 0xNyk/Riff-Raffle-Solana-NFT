{"ast":null,"code":"import { utils } from '@project-serum/anchor';\nimport { getTokenAccount } from '@project-serum/common';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport * as math from 'mathjs';\nexport const getWalletLamports = async (provider) => {\n  if (!provider.wallet.publicKey) return;\n  const walletAccount = await provider.connection.getAccountInfo(provider.wallet.publicKey);\n  return walletAccount === null || walletAccount === void 0 ? void 0 : walletAccount.lamports; // TODO: Check why number??\n};\nexport const getBuyerATABalance = async (provider, proceedsMint) => {\n  const buyerATA = await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, proceedsMint, provider.wallet.publicKey);\n\n  try {\n    const accountInfo = await getTokenAccount(provider, buyerATA);\n    return accountInfo.amount;\n  } catch (error) {\n    console.error(error);\n    return;\n  }\n};\nexport const getDisplayAmount = (amount, mint) => {\n  return math.bignumber(amount.toString()).div(Math.pow(10, mint.decimals)).toString();\n};\nexport const getAssociatedTokenAccountAddress = (walletAddress, mint) => Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, mint, walletAddress);\nexport const findAssociatedTokenAccountAddressSync = (walletAddress, mint) => utils.publicKey.findProgramAddressSync([walletAddress.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], ASSOCIATED_TOKEN_PROGRAM_ID);\nexport const createOwnAssociatedTokenAccountInstruction = (mint, ata, owner) => Token.createAssociatedTokenAccountInstruction(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, mint, ata, owner, owner);","map":{"version":3,"sources":["C:/Riff-Raffle-Solana-NFT build 1-1/app/src/lib/accounts.ts"],"names":["utils","getTokenAccount","ASSOCIATED_TOKEN_PROGRAM_ID","Token","TOKEN_PROGRAM_ID","math","getWalletLamports","provider","wallet","publicKey","walletAccount","connection","getAccountInfo","lamports","getBuyerATABalance","proceedsMint","buyerATA","getAssociatedTokenAddress","accountInfo","amount","error","console","getDisplayAmount","mint","bignumber","toString","div","Math","pow","decimals","getAssociatedTokenAccountAddress","walletAddress","findAssociatedTokenAccountAddressSync","findProgramAddressSync","toBuffer","createOwnAssociatedTokenAccountInstruction","ata","owner","createAssociatedTokenAccountInstruction"],"mappings":"AAAA,SAAmBA,KAAnB,QAAgC,uBAAhC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SACEC,2BADF,EAEEC,KAFF,EAGEC,gBAHF,QAKO,mBALP;AAOA,OAAO,KAAKC,IAAZ,MAAsB,QAAtB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,OAC/BC,QAD+B,KAEC;AAChC,MAAI,CAACA,QAAQ,CAACC,MAAT,CAAgBC,SAArB,EAAgC;AAEhC,QAAMC,aAAa,GAAG,MAAMH,QAAQ,CAACI,UAAT,CAAoBC,cAApB,CAC1BL,QAAQ,CAACC,MAAT,CAAgBC,SADU,CAA5B;AAIA,SAAOC,aAAP,aAAOA,aAAP,uBAAOA,aAAa,CAAEG,QAAtB,CAPgC,CAOA;AACjC,CAVM;AAYP,OAAO,MAAMC,kBAAkB,GAAG,OAChCP,QADgC,EAEhCQ,YAFgC,KAGH;AAC7B,QAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,yBAAN,CACrBf,2BADqB,EAErBE,gBAFqB,EAGrBW,YAHqB,EAIrBR,QAAQ,CAACC,MAAT,CAAgBC,SAJK,CAAvB;;AAOA,MAAI;AACF,UAAMS,WAAW,GAAG,MAAMjB,eAAe,CAACM,QAAD,EAAWS,QAAX,CAAzC;AACA,WAAOE,WAAW,CAACC,MAAnB;AACD,GAHD,CAGE,OAAOC,KAAP,EAAmB;AACnBC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA;AACD;AACF,CAlBM;AAoBP,OAAO,MAAME,gBAAgB,GAAG,CAC9BH,MAD8B,EAE9BI,IAF8B,KAGnB;AACX,SAAOlB,IAAI,CACRmB,SADI,CACML,MAAM,CAACM,QAAP,EADN,EAEJC,GAFI,CAEAC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaL,IAAI,CAACM,QAAlB,CAFA,EAGJJ,QAHI,EAAP;AAID,CARM;AAUP,OAAO,MAAMK,gCAAgC,GAAG,CAC9CC,aAD8C,EAE9CR,IAF8C,KAI9CpB,KAAK,CAACc,yBAAN,CACEf,2BADF,EAEEE,gBAFF,EAGEmB,IAHF,EAIEQ,aAJF,CAJK;AAWP,OAAO,MAAMC,qCAAqC,GAAG,CACnDD,aADmD,EAEnDR,IAFmD,KAInDvB,KAAK,CAACS,SAAN,CAAgBwB,sBAAhB,CACE,CAACF,aAAa,CAACG,QAAd,EAAD,EAA2B9B,gBAAgB,CAAC8B,QAAjB,EAA3B,EAAwDX,IAAI,CAACW,QAAL,EAAxD,CADF,EAEEhC,2BAFF,CAJK;AASP,OAAO,MAAMiC,0CAA0C,GAAG,CACxDZ,IADwD,EAExDa,GAFwD,EAGxDC,KAHwD,KAKxDlC,KAAK,CAACmC,uCAAN,CACEpC,2BADF,EAEEE,gBAFF,EAGEmB,IAHF,EAIEa,GAJF,EAKEC,KALF,EAMEA,KANF,CALK","sourcesContent":["import { Provider, utils } from '@project-serum/anchor';\r\nimport { getTokenAccount } from '@project-serum/common';\r\nimport {\r\n  ASSOCIATED_TOKEN_PROGRAM_ID,\r\n  Token,\r\n  TOKEN_PROGRAM_ID,\r\n  u64,\r\n} from '@solana/spl-token';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport * as math from 'mathjs';\r\n\r\nexport const getWalletLamports = async (\r\n  provider: Provider\r\n): Promise<number | undefined> => {\r\n  if (!provider.wallet.publicKey) return;\r\n\r\n  const walletAccount = await provider.connection.getAccountInfo(\r\n    provider.wallet.publicKey\r\n  );\r\n\r\n  return walletAccount?.lamports; // TODO: Check why number??\r\n};\r\n\r\nexport const getBuyerATABalance = async (\r\n  provider: Provider,\r\n  proceedsMint: PublicKey\r\n): Promise<u64 | undefined> => {\r\n  const buyerATA = await Token.getAssociatedTokenAddress(\r\n    ASSOCIATED_TOKEN_PROGRAM_ID,\r\n    TOKEN_PROGRAM_ID,\r\n    proceedsMint,\r\n    provider.wallet.publicKey\r\n  );\r\n\r\n  try {\r\n    const accountInfo = await getTokenAccount(provider, buyerATA);\r\n    return accountInfo.amount;\r\n  } catch (error: any) {\r\n    console.error(error);\r\n    return;\r\n  }\r\n};\r\n\r\nexport const getDisplayAmount = (\r\n  amount: u64,\r\n  mint: { decimals: number }\r\n): string => {\r\n  return math\r\n    .bignumber(amount.toString())\r\n    .div(Math.pow(10, mint.decimals))\r\n    .toString();\r\n};\r\n\r\nexport const getAssociatedTokenAccountAddress = (\r\n  walletAddress: PublicKey,\r\n  mint: PublicKey\r\n) =>\r\n  Token.getAssociatedTokenAddress(\r\n    ASSOCIATED_TOKEN_PROGRAM_ID,\r\n    TOKEN_PROGRAM_ID,\r\n    mint,\r\n    walletAddress\r\n  );\r\n\r\nexport const findAssociatedTokenAccountAddressSync = (\r\n  walletAddress: PublicKey,\r\n  mint: PublicKey\r\n) =>\r\n  utils.publicKey.findProgramAddressSync(\r\n    [walletAddress.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    ASSOCIATED_TOKEN_PROGRAM_ID\r\n  );\r\n\r\nexport const createOwnAssociatedTokenAccountInstruction = (\r\n  mint: PublicKey,\r\n  ata: PublicKey,\r\n  owner: PublicKey\r\n) =>\r\n  Token.createAssociatedTokenAccountInstruction(\r\n    ASSOCIATED_TOKEN_PROGRAM_ID,\r\n    TOKEN_PROGRAM_ID,\r\n    mint,\r\n    ata,\r\n    owner,\r\n    owner\r\n  );\r\n"]},"metadata":{},"sourceType":"module"}