{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kroni\\\\Desktop\\\\RIFF RAFFLE SITE PNSC\\\\Riff-Raffle-Solana-NFT\\\\app\\\\src\\\\router\\\\raffleDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router';\nimport RaffleEndedScreen from '../pages/RaffleEndedScreen';\nimport RaffleOngoingScreen from '../pages/RaffleOngoingScreen';\nimport { useRafflesStore } from '../hooks/useRafflesStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RaffleDetails = () => {\n  _s();\n\n  const {\n    id: raffleId\n  } = useParams();\n  const {\n    raffles,\n    updateRaffleById\n  } = useRafflesStore();\n  const [currentRaffle, setCurrentRaffle] = useState();\n  const updateCurrentRaffle = useCallback(() => {\n    if (updateRaffleById) updateRaffleById(raffleId);\n  }, [raffleId, updateRaffleById]);\n  useEffect(() => {\n    updateCurrentRaffle();\n    const timerId = setInterval(updateCurrentRaffle, 5000);\n    return () => clearInterval(timerId);\n  }, [updateCurrentRaffle]);\n  useEffect(() => {\n    console.log(raffles);\n    console.log(raffles.has(raffleId));\n    console.log(\"Raffle ID:\");\n    console.log(raffleId);\n\n    if (raffles.has(raffleId)) {\n      setCurrentRaffle(raffles.get(raffleId));\n    }\n  }, [raffles, raffleId]);\n  const isRaffleEnded = useMemo(() => currentRaffle && new Date() > currentRaffle.endTimestamp, [currentRaffle]);\n  if (!currentRaffle) console.log(\"Current raffle is null\");\n  if (!currentRaffle) return null;\n  return isRaffleEnded ? /*#__PURE__*/_jsxDEV(RaffleEndedScreen, {\n    raffle: currentRaffle,\n    updateRaffle: updateCurrentRaffle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(RaffleOngoingScreen, {\n    raffle: currentRaffle,\n    updateRaffle: updateCurrentRaffle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RaffleDetails, \"8HMXQNvBeeQgI1RZ2A+e32bB0lQ=\", false, function () {\n  return [useParams, useRafflesStore];\n});\n\n_c = RaffleDetails;\nexport default RaffleDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"RaffleDetails\");","map":{"version":3,"sources":["C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT/app/src/router/raffleDetails.tsx"],"names":["useCallback","useEffect","useMemo","useState","useParams","RaffleEndedScreen","RaffleOngoingScreen","useRafflesStore","RaffleDetails","id","raffleId","raffles","updateRaffleById","currentRaffle","setCurrentRaffle","updateCurrentRaffle","timerId","setInterval","clearInterval","console","log","has","get","isRaffleEnded","Date","endTimestamp"],"mappings":";;;AAAA,SAAaA,WAAb,EAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AACA,SAASC,eAAT,QAAgC,0BAAhC;;;AAGA,MAAMC,aAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAM;AAAEC,IAAAA,EAAE,EAAEC;AAAN,MAAmBN,SAAS,EAAlC;AACA,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAgCL,eAAe,EAArD;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,EAAlD;AAEA,QAAMY,mBAAmB,GAAGf,WAAW,CAAC,MAAM;AAC5C,QAAIY,gBAAJ,EAAsBA,gBAAgB,CAACF,QAAD,CAAhB;AACvB,GAFsC,EAEpC,CAACA,QAAD,EAAWE,gBAAX,CAFoC,CAAvC;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,mBAAmB;AACnB,UAAMC,OAAO,GAAGC,WAAW,CAACF,mBAAD,EAAsB,IAAtB,CAA3B;AACA,WAAO,MAAMG,aAAa,CAACF,OAAD,CAA1B;AACD,GAJQ,EAIN,CAACD,mBAAD,CAJM,CAAT;AAMAd,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,OAAO,CAACU,GAAR,CAAYX,QAAZ,CAAZ;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;;AACA,QAAIC,OAAO,CAACU,GAAR,CAAYX,QAAZ,CAAJ,EAA2B;AACzBI,MAAAA,gBAAgB,CAACH,OAAO,CAACW,GAAR,CAAYZ,QAAZ,CAAD,CAAhB;AACD;AAEF,GATQ,EASN,CAACC,OAAD,EAAUD,QAAV,CATM,CAAT;AAWA,QAAMa,aAAa,GAAGrB,OAAO,CAC3B,MAAMW,aAAa,IAAI,IAAIW,IAAJ,KAAaX,aAAa,CAACY,YADvB,EAE3B,CAACZ,aAAD,CAF2B,CAA7B;AAKA,MAAI,CAACA,aAAL,EAAoBM,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACpB,MAAI,CAACP,aAAL,EAAoB,OAAO,IAAP;AAEpB,SAAOU,aAAa,gBAClB,QAAC,iBAAD;AACE,IAAA,MAAM,EAAEV,aADV;AAEE,IAAA,YAAY,EAAEE;AAFhB;AAAA;AAAA;AAAA;AAAA,UADkB,gBAMlB,QAAC,mBAAD;AACE,IAAA,MAAM,EAAEF,aADV;AAEE,IAAA,YAAY,EAAEE;AAFhB;AAAA;AAAA;AAAA;AAAA,UANF;AAWD,CA7CD;;GAAMP,a;UACqBJ,S,EACaG,e;;;KAFlCC,a;AA+CN,eAAeA,aAAf","sourcesContent":["import { FC, useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\n\r\nimport RaffleEndedScreen from '../pages/RaffleEndedScreen';\r\nimport RaffleOngoingScreen from '../pages/RaffleOngoingScreen';\r\nimport { useRafflesStore } from '../hooks/useRafflesStore';\r\nimport { Raffle } from '../lib/types';\r\n\r\nconst RaffleDetails: FC = () => {\r\n  const { id: raffleId } = useParams<{ id: string }>();\r\n  const { raffles, updateRaffleById } = useRafflesStore();\r\n  const [currentRaffle, setCurrentRaffle] = useState<Raffle>();\r\n\r\n  const updateCurrentRaffle = useCallback(() => {\r\n    if (updateRaffleById) updateRaffleById(raffleId);\r\n  }, [raffleId, updateRaffleById]);\r\n\r\n  useEffect(() => {\r\n    updateCurrentRaffle();\r\n    const timerId = setInterval(updateCurrentRaffle, 5000);\r\n    return () => clearInterval(timerId);\r\n  }, [updateCurrentRaffle]);\r\n\r\n  useEffect(() => {\r\n    console.log(raffles);\r\n    console.log(raffles.has(raffleId));\r\n    console.log(\"Raffle ID:\");\r\n    console.log(raffleId);\r\n    if (raffles.has(raffleId)) {\r\n      setCurrentRaffle(raffles.get(raffleId));\r\n    } \r\n\r\n  }, [raffles, raffleId]);\r\n\r\n  const isRaffleEnded = useMemo(\r\n    () => currentRaffle && new Date() > currentRaffle.endTimestamp,\r\n    [currentRaffle]\r\n  );\r\n  \r\n  if (!currentRaffle) console.log(\"Current raffle is null\")\r\n  if (!currentRaffle) return null;\r\n\r\n  return isRaffleEnded ? (\r\n    <RaffleEndedScreen\r\n      raffle={currentRaffle}\r\n      updateRaffle={updateCurrentRaffle}\r\n    />\r\n  ) : (\r\n    <RaffleOngoingScreen\r\n      raffle={currentRaffle}\r\n      updateRaffle={updateCurrentRaffle}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RaffleDetails;\r\n"]},"metadata":{},"sourceType":"module"}