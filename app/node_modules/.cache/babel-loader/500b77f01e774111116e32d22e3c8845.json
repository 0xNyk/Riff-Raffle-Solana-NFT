{"ast":null,"code":"import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram, PublicKey } from '@solana/web3.js';\nimport { createOwnAssociatedTokenAccountInstruction } from '../accounts';\nconst FEE_WALLET = new PublicKey('pErLXusjgZkDJT9126Mb8hp8NZxmJoGniA6WEMPpNhb');\nexport const claimPrize = async (draffleClient, raffle, prizeIndex, ticketIndex) => {\n  if (prizeIndex >= raffle.prizes.length) throw Error(`Prize index does not match prize list (${raffle.prizes.length})`);\n  const prize = raffle.prizes[prizeIndex];\n  const ata = await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, prize.mint.publicKey, draffleClient.provider.wallet.publicKey);\n  let instructions;\n  const info = await draffleClient.provider.connection.getAccountInfo(ata);\n\n  if (info === null) {\n    instructions = [createOwnAssociatedTokenAccountInstruction(prize.mint.publicKey, ata, draffleClient.provider.wallet.publicKey)];\n  }\n\n  return await draffleClient.rpc.claimPrize(prizeIndex, ticketIndex, {\n    accounts: {\n      raffle: raffle.publicKey,\n      entrants: raffle.entrantsAccountAddress,\n      prize: prize.address,\n      winnerTokenAccount: ata,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      feeAcc: FEE_WALLET,\n      payer: draffleClient.provider.wallet.publicKey\n    },\n    instructions\n  });\n};","map":{"version":3,"sources":["C:/Riff-Raffle-Solana-NFT build 1-1/app/src/lib/actions/claimPrize.ts"],"names":["ASSOCIATED_TOKEN_PROGRAM_ID","Token","TOKEN_PROGRAM_ID","SystemProgram","PublicKey","createOwnAssociatedTokenAccountInstruction","FEE_WALLET","claimPrize","draffleClient","raffle","prizeIndex","ticketIndex","prizes","length","Error","prize","ata","getAssociatedTokenAddress","mint","publicKey","provider","wallet","instructions","info","connection","getAccountInfo","rpc","accounts","entrants","entrantsAccountAddress","address","winnerTokenAccount","tokenProgram","systemProgram","programId","feeAcc","payer"],"mappings":"AAAA,SACEA,2BADF,EAEEC,KAFF,EAGEC,gBAHF,QAIO,mBAJP;AAKA,SAAiCC,aAAjC,EAAgDC,SAAhD,QAAiE,iBAAjE;AAGA,SAASC,0CAAT,QAA2D,aAA3D;AAGA,MAAMC,UAAU,GAAG,IAAIF,SAAJ,CAAc,6CAAd,CAAnB;AAEA,OAAO,MAAMG,UAAU,GAAG,OACxBC,aADwB,EAExBC,MAFwB,EAGxBC,UAHwB,EAIxBC,WAJwB,KAKrB;AACH,MAAID,UAAU,IAAID,MAAM,CAACG,MAAP,CAAcC,MAAhC,EACE,MAAMC,KAAK,CACR,0CAAyCL,MAAM,CAACG,MAAP,CAAcC,MAAO,GADtD,CAAX;AAGF,QAAME,KAAK,GAAGN,MAAM,CAACG,MAAP,CAAcF,UAAd,CAAd;AAEA,QAAMM,GAAG,GAAG,MAAMf,KAAK,CAACgB,yBAAN,CAChBjB,2BADgB,EAEhBE,gBAFgB,EAGhBa,KAAK,CAACG,IAAN,CAAWC,SAHK,EAIhBX,aAAa,CAACY,QAAd,CAAuBC,MAAvB,CAA8BF,SAJd,CAAlB;AAOA,MAAIG,YAAJ;AACA,QAAMC,IAAI,GAAG,MAAMf,aAAa,CAACY,QAAd,CAAuBI,UAAvB,CAAkCC,cAAlC,CAAiDT,GAAjD,CAAnB;;AACA,MAAIO,IAAI,KAAK,IAAb,EAAmB;AACjBD,IAAAA,YAAY,GAAG,CACbjB,0CAA0C,CACxCU,KAAK,CAACG,IAAN,CAAWC,SAD6B,EAExCH,GAFwC,EAGxCR,aAAa,CAACY,QAAd,CAAuBC,MAAvB,CAA8BF,SAHU,CAD7B,CAAf;AAOD;;AAED,SAAO,MAAMX,aAAa,CAACkB,GAAd,CAAkBnB,UAAlB,CAA6BG,UAA7B,EAAyCC,WAAzC,EAAsD;AACjEgB,IAAAA,QAAQ,EAAE;AACRlB,MAAAA,MAAM,EAAEA,MAAM,CAACU,SADP;AAERS,MAAAA,QAAQ,EAAEnB,MAAM,CAACoB,sBAFT;AAGRd,MAAAA,KAAK,EAAEA,KAAK,CAACe,OAHL;AAIRC,MAAAA,kBAAkB,EAAEf,GAJZ;AAKRgB,MAAAA,YAAY,EAAE9B,gBALN;AAMR+B,MAAAA,aAAa,EAAE9B,aAAa,CAAC+B,SANrB;AAORC,MAAAA,MAAM,EAAE7B,UAPA;AAQR8B,MAAAA,KAAK,EAAE5B,aAAa,CAACY,QAAd,CAAuBC,MAAvB,CAA8BF;AAR7B,KADuD;AAWjEG,IAAAA;AAXiE,GAAtD,CAAb;AAaD,CA5CM","sourcesContent":["import {\r\n  ASSOCIATED_TOKEN_PROGRAM_ID,\r\n  Token,\r\n  TOKEN_PROGRAM_ID,\r\n} from '@solana/spl-token';\r\nimport { TransactionInstruction, SystemProgram, PublicKey } from '@solana/web3.js';\r\n\r\nimport { DraffleProgram } from '../../providers/ProgramApisProvider';\r\nimport { createOwnAssociatedTokenAccountInstruction } from '../accounts';\r\nimport { Raffle } from '../types';\r\n\r\nconst FEE_WALLET = new PublicKey('pErLXusjgZkDJT9126Mb8hp8NZxmJoGniA6WEMPpNhb');\r\n\r\nexport const claimPrize = async (\r\n  draffleClient: DraffleProgram,\r\n  raffle: Raffle,\r\n  prizeIndex: number,\r\n  ticketIndex: number\r\n) => {\r\n  if (prizeIndex >= raffle.prizes.length)\r\n    throw Error(\r\n      `Prize index does not match prize list (${raffle.prizes.length})`\r\n    );\r\n  const prize = raffle.prizes[prizeIndex];\r\n\r\n  const ata = await Token.getAssociatedTokenAddress(\r\n    ASSOCIATED_TOKEN_PROGRAM_ID,\r\n    TOKEN_PROGRAM_ID,\r\n    prize.mint.publicKey,\r\n    draffleClient.provider.wallet.publicKey\r\n  );\r\n\r\n  let instructions: TransactionInstruction[] | undefined;\r\n  const info = await draffleClient.provider.connection.getAccountInfo(ata);\r\n  if (info === null) {\r\n    instructions = [\r\n      createOwnAssociatedTokenAccountInstruction(\r\n        prize.mint.publicKey,\r\n        ata,\r\n        draffleClient.provider.wallet.publicKey,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  return await draffleClient.rpc.claimPrize(prizeIndex, ticketIndex, {\r\n    accounts: {\r\n      raffle: raffle.publicKey,\r\n      entrants: raffle.entrantsAccountAddress,\r\n      prize: prize.address,\r\n      winnerTokenAccount: ata,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: SystemProgram.programId,\r\n      feeAcc: FEE_WALLET,\r\n      payer: draffleClient.provider.wallet.publicKey,\r\n    },\r\n    instructions,\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}