{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nconst useRandomDrawer = ({\n  endRange,\n  drawLength = 50,\n  spinIntervalMs = 100,\n  redrawIntervalMs = 5000\n}) => {\n  _s();\n\n  const [currentTicketIndex, setCurrentTicketIndex] = useState(0);\n  const [randomTickets, setRandomTickets] = useState([]);\n  useEffect(() => {\n    const timerId = setInterval(() => setRandomTickets(Array.from({\n      length: drawLength\n    }, () => Math.round(Math.random() * endRange))), redrawIntervalMs);\n    return () => clearInterval(timerId);\n  }, [endRange, redrawIntervalMs, drawLength, setRandomTickets]);\n  useEffect(() => {\n    const timerId = setInterval(() => setCurrentTicketIndex(prevTicketIndex => ++prevTicketIndex % drawLength), spinIntervalMs);\n    return () => clearInterval(timerId);\n  }, [drawLength, spinIntervalMs, setCurrentTicketIndex]);\n  if (endRange === 0) return undefined;\n  return randomTickets[currentTicketIndex];\n};\n\n_s(useRandomDrawer, \"C+85YlzAlDXZ+HZppoB3A3GpIT4=\");\n\nexport default useRandomDrawer;","map":{"version":3,"sources":["C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT/app/src/hooks/useRandomDrawer.tsx"],"names":["useEffect","useState","useRandomDrawer","endRange","drawLength","spinIntervalMs","redrawIntervalMs","currentTicketIndex","setCurrentTicketIndex","randomTickets","setRandomTickets","timerId","setInterval","Array","from","length","Math","round","random","clearInterval","prevTicketIndex","undefined"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AASA,MAAMC,eAAe,GAAG,CAAC;AACvBC,EAAAA,QADuB;AAEvBC,EAAAA,UAAU,GAAG,EAFU;AAGvBC,EAAAA,cAAc,GAAG,GAHM;AAIvBC,EAAAA,gBAAgB,GAAG;AAJI,CAAD,KAKuB;AAAA;;AAC7C,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC,CAAD,CAA5D;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAW,EAAX,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,OAAO,GAAGC,WAAW,CACzB,MACEF,gBAAgB,CACdG,KAAK,CAACC,IAAN,CAAW;AAAEC,MAAAA,MAAM,EAAEX;AAAV,KAAX,EAAmC,MACjCY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBf,QAA3B,CADF,CADc,CAFO,EAOzBG,gBAPyB,CAA3B;AASA,WAAO,MAAMa,aAAa,CAACR,OAAD,CAA1B;AACD,GAXQ,EAWN,CAACR,QAAD,EAAWG,gBAAX,EAA6BF,UAA7B,EAAyCM,gBAAzC,CAXM,CAAT;AAaAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,OAAO,GAAGC,WAAW,CACzB,MACEJ,qBAAqB,CAClBY,eAAD,IAAqB,EAAEA,eAAF,GAAoBhB,UADtB,CAFE,EAKzBC,cALyB,CAA3B;AAOA,WAAO,MAAMc,aAAa,CAACR,OAAD,CAA1B;AACD,GATQ,EASN,CAACP,UAAD,EAAaC,cAAb,EAA6BG,qBAA7B,CATM,CAAT;AAWA,MAAIL,QAAQ,KAAK,CAAjB,EAAoB,OAAOkB,SAAP;AACpB,SAAOZ,aAAa,CAACF,kBAAD,CAApB;AACD,CAnCD;;GAAML,e;;AAqCN,eAAeA,eAAf","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\ninterface useRandomDrawerArgs {\r\n  endRange: number;\r\n  drawLength?: number;\r\n  spinIntervalMs?: number;\r\n  redrawIntervalMs?: number;\r\n}\r\n\r\nconst useRandomDrawer = ({\r\n  endRange,\r\n  drawLength = 50,\r\n  spinIntervalMs = 100,\r\n  redrawIntervalMs = 5000,\r\n}: useRandomDrawerArgs): number | undefined => {\r\n  const [currentTicketIndex, setCurrentTicketIndex] = useState(0);\r\n  const [randomTickets, setRandomTickets] = useState<number[]>([]);\r\n\r\n  useEffect(() => {\r\n    const timerId = setInterval(\r\n      () =>\r\n        setRandomTickets(\r\n          Array.from({ length: drawLength }, () =>\r\n            Math.round(Math.random() * endRange)\r\n          )\r\n        ),\r\n      redrawIntervalMs\r\n    );\r\n    return () => clearInterval(timerId);\r\n  }, [endRange, redrawIntervalMs, drawLength, setRandomTickets]);\r\n\r\n  useEffect(() => {\r\n    const timerId = setInterval(\r\n      () =>\r\n        setCurrentTicketIndex(\r\n          (prevTicketIndex) => ++prevTicketIndex % drawLength\r\n        ),\r\n      spinIntervalMs\r\n    );\r\n    return () => clearInterval(timerId);\r\n  }, [drawLength, spinIntervalMs, setCurrentTicketIndex]);\r\n\r\n  if (endRange === 0) return undefined;\r\n  return randomTickets[currentTicketIndex];\r\n};\r\n\r\nexport default useRandomDrawer;\r\n"]},"metadata":{},"sourceType":"module"}