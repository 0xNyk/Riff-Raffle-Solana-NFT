{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EVENT_QUEUE_LAYOUT = exports.REQUEST_QUEUE_LAYOUT = exports.decodeEventQueue = exports.decodeRequestQueue = exports.decodeEventsSince = void 0;\n\nvar buffer_layout_1 = require(\"buffer-layout\");\n\nvar layout_1 = require(\"./layout\");\n\nvar REQUEST_QUEUE_HEADER = buffer_layout_1.struct([buffer_layout_1.blob(5), layout_1.accountFlagsLayout('accountFlags'), buffer_layout_1.u32('head'), layout_1.zeros(4), buffer_layout_1.u32('count'), layout_1.zeros(4), buffer_layout_1.u32('nextSeqNum'), layout_1.zeros(4)]);\nvar REQUEST_FLAGS = buffer_layout_1.bits(buffer_layout_1.u8(), false, 'requestFlags');\nREQUEST_FLAGS.addBoolean('newOrder');\nREQUEST_FLAGS.addBoolean('cancelOrder');\nREQUEST_FLAGS.addBoolean('bid');\nREQUEST_FLAGS.addBoolean('postOnly');\nREQUEST_FLAGS.addBoolean('ioc');\nvar REQUEST = buffer_layout_1.struct([REQUEST_FLAGS, buffer_layout_1.u8('openOrdersSlot'), buffer_layout_1.u8('feeTier'), buffer_layout_1.blob(5), layout_1.u64('maxBaseSizeOrCancelId'), layout_1.u64('nativeQuoteQuantityLocked'), layout_1.u128('orderId'), layout_1.publicKeyLayout('openOrders'), layout_1.u64('clientOrderId')]);\nvar EVENT_QUEUE_HEADER = buffer_layout_1.struct([buffer_layout_1.blob(5), layout_1.accountFlagsLayout('accountFlags'), buffer_layout_1.u32('head'), layout_1.zeros(4), buffer_layout_1.u32('count'), layout_1.zeros(4), buffer_layout_1.u32('seqNum'), layout_1.zeros(4)]);\nvar EVENT_FLAGS = buffer_layout_1.bits(buffer_layout_1.u8(), false, 'eventFlags');\nEVENT_FLAGS.addBoolean('fill');\nEVENT_FLAGS.addBoolean('out');\nEVENT_FLAGS.addBoolean('bid');\nEVENT_FLAGS.addBoolean('maker');\nvar EVENT = buffer_layout_1.struct([EVENT_FLAGS, buffer_layout_1.u8('openOrdersSlot'), buffer_layout_1.u8('feeTier'), buffer_layout_1.blob(5), layout_1.u64('nativeQuantityReleased'), layout_1.u64('nativeQuantityPaid'), layout_1.u64('nativeFeeOrRebate'), layout_1.u128('orderId'), layout_1.publicKeyLayout('openOrders'), layout_1.u64('clientOrderId')]);\n\nfunction decodeQueueItem(headerLayout, nodeLayout, buffer, nodeIndex) {\n  return nodeLayout.decode(buffer, headerLayout.span + nodeIndex * nodeLayout.span);\n}\n\nfunction decodeQueue(headerLayout, nodeLayout, buffer, history) {\n  var header = headerLayout.decode(buffer);\n  var allocLen = Math.floor((buffer.length - headerLayout.span) / nodeLayout.span);\n  var nodes = [];\n\n  if (history) {\n    for (var i = 0; i < Math.min(history, allocLen); ++i) {\n      var nodeIndex = (header.head + header.count + allocLen - 1 - i) % allocLen;\n      nodes.push(decodeQueueItem(headerLayout, nodeLayout, buffer, nodeIndex));\n    }\n  } else {\n    for (var _i = 0; _i < header.count; ++_i) {\n      var _nodeIndex = (header.head + _i) % allocLen;\n\n      nodes.push(decodeQueueItem(headerLayout, nodeLayout, buffer, _nodeIndex));\n    }\n  }\n\n  return {\n    header: header,\n    nodes: nodes\n  };\n}\n\nfunction decodeEventsSince(buffer, lastSeqNum) {\n  var header = EVENT_QUEUE_HEADER.decode(buffer);\n  var allocLen = Math.floor((buffer.length - EVENT_QUEUE_HEADER.span) / EVENT.span); // calculate number of missed events\n  // account for u32 & ringbuffer overflows\n\n  var modulo32Uint = 0x100000000;\n  var missedEvents = (header.seqNum - lastSeqNum + modulo32Uint) % modulo32Uint;\n\n  if (missedEvents > allocLen) {\n    missedEvents = allocLen - 1;\n  }\n\n  var startSeq = (header.seqNum - missedEvents + modulo32Uint) % modulo32Uint; // define boundary indexes in ring buffer [start;end)\n\n  var endIndex = (header.head + header.count) % allocLen;\n  var startIndex = (endIndex - missedEvents + allocLen) % allocLen;\n  var results = [];\n\n  for (var i = 0; i < missedEvents; ++i) {\n    var nodeIndex = (startIndex + i) % allocLen;\n    var event = decodeQueueItem(EVENT_QUEUE_HEADER, EVENT, buffer, nodeIndex);\n    event.seqNum = (startSeq + i) % modulo32Uint;\n    results.push(event);\n  }\n\n  return results;\n}\n\nexports.decodeEventsSince = decodeEventsSince;\n\nfunction decodeRequestQueue(buffer, history) {\n  var _decodeQueue = decodeQueue(REQUEST_QUEUE_HEADER, REQUEST, buffer, history),\n      header = _decodeQueue.header,\n      nodes = _decodeQueue.nodes;\n\n  if (!header.accountFlags.initialized || !header.accountFlags.requestQueue) {\n    throw new Error('Invalid requests queue');\n  }\n\n  return nodes;\n}\n\nexports.decodeRequestQueue = decodeRequestQueue;\n\nfunction decodeEventQueue(buffer, history) {\n  var _decodeQueue2 = decodeQueue(EVENT_QUEUE_HEADER, EVENT, buffer, history),\n      header = _decodeQueue2.header,\n      nodes = _decodeQueue2.nodes;\n\n  if (!header.accountFlags.initialized || !header.accountFlags.eventQueue) {\n    throw new Error('Invalid events queue');\n  }\n\n  return nodes;\n}\n\nexports.decodeEventQueue = decodeEventQueue;\nexports.REQUEST_QUEUE_LAYOUT = {\n  HEADER: REQUEST_QUEUE_HEADER,\n  NODE: REQUEST\n};\nexports.EVENT_QUEUE_LAYOUT = {\n  HEADER: EVENT_QUEUE_HEADER,\n  NODE: EVENT\n};","map":null,"metadata":{},"sourceType":"script"}