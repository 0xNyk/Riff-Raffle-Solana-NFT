{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Riff-Raffle-Solana-NFT build 1-1/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Riff-Raffle-Solana-NFT build 1-1/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOwnedAccountsFilters = exports.parseMintData = exports.parseTokenAccountData = exports.MINT_LAYOUT = exports.ACCOUNT_LAYOUT = exports.getOwnedTokenAccounts = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar serum_1 = require(\"@project-serum/serum\");\n\nvar bs58 = __importStar(require(\"bs58\"));\n\nvar BufferLayout = __importStar(require(\"buffer-layout\"));\n\nfunction getOwnedTokenAccounts(_x, _x2) {\n  return _getOwnedTokenAccounts.apply(this, arguments);\n}\n\nfunction _getOwnedTokenAccounts() {\n  _getOwnedTokenAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, publicKey) {\n    var filters, resp;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            filters = getOwnedAccountsFilters(publicKey); // @ts-ignore\n\n            _context.next = 3;\n            return connection._rpcRequest('getProgramAccounts', [serum_1.TokenInstructions.TOKEN_PROGRAM_ID.toBase58(), {\n              commitment: connection.commitment,\n              filters: filters\n            }]);\n\n          case 3:\n            resp = _context.sent;\n\n            if (!resp.error) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error('failed to get token accounts owned by ' + publicKey.toBase58() + ': ' + resp.error.message);\n\n          case 6:\n            return _context.abrupt(\"return\", resp.result // @ts-ignore\n            .map(function (_ref) {\n              var pubkey = _ref.pubkey,\n                  data = _ref.account.data;\n              data = bs58.decode(data);\n              return {\n                publicKey: new web3_js_1.PublicKey(pubkey),\n                account: parseTokenAccountData(data)\n              };\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getOwnedTokenAccounts.apply(this, arguments);\n}\n\nexports.getOwnedTokenAccounts = getOwnedTokenAccounts; // todo: remove\n\nexports.ACCOUNT_LAYOUT = BufferLayout.struct([BufferLayout.blob(32, 'mint'), BufferLayout.blob(32, 'owner'), BufferLayout.nu64('amount'), BufferLayout.blob(93)]);\nexports.MINT_LAYOUT = BufferLayout.struct([BufferLayout.blob(44), BufferLayout.u8('decimals'), BufferLayout.blob(37)]);\n\nfunction parseTokenAccountData(data) {\n  // @ts-ignore\n  var _exports$ACCOUNT_LAYO = exports.ACCOUNT_LAYOUT.decode(data),\n      mint = _exports$ACCOUNT_LAYO.mint,\n      owner = _exports$ACCOUNT_LAYO.owner,\n      amount = _exports$ACCOUNT_LAYO.amount;\n\n  return {\n    mint: new web3_js_1.PublicKey(mint),\n    owner: new web3_js_1.PublicKey(owner),\n    amount: amount\n  };\n}\n\nexports.parseTokenAccountData = parseTokenAccountData; // @ts-ignore\n\nfunction parseMintData(data) {\n  // @ts-ignore\n  var _exports$MINT_LAYOUT$ = exports.MINT_LAYOUT.decode(data),\n      decimals = _exports$MINT_LAYOUT$.decimals;\n\n  return {\n    decimals: decimals\n  };\n}\n\nexports.parseMintData = parseMintData; // @ts-ignore\n\nfunction getOwnedAccountsFilters(publicKey) {\n  return [{\n    memcmp: {\n      // @ts-ignore\n      offset: exports.ACCOUNT_LAYOUT.offsetOf('owner'),\n      bytes: publicKey.toBase58()\n    }\n  }, {\n    dataSize: exports.ACCOUNT_LAYOUT.span\n  }];\n}\n\nexports.getOwnedAccountsFilters = getOwnedAccountsFilters;","map":null,"metadata":{},"sourceType":"script"}