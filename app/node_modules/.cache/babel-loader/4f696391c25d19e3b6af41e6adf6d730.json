{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Riff-Raffle-Solana-NFT build 1-1/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _toConsumableArray from\"C:/Riff-Raffle-Solana-NFT build 1-1/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"C:/Riff-Raffle-Solana-NFT build 1-1/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"C:/Riff-Raffle-Solana-NFT build 1-1/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"C:/Riff-Raffle-Solana-NFT build 1-1/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{AccountsCoder}from'@project-serum/anchor';import{parseTokenAccount}from'@project-serum/common';import{u64}from'@solana/spl-token';import{PublicKey}from'@solana/web3.js';import{tokenInfoMap,UNKNOWN_TOKEN_INFO}from'../../config/tokenRegistry';import{getDisplayAmount}from'../accounts';import{getMetadata,getNFTMetadata}from'../metadata';import{PrizeType}from'../types';export var fetchProceedsAccount=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(raffleAccountAddress,draffleClient,connection){var _yield$PublicKey$find,_yield$PublicKey$find2,address,account,data,tokenInfo,mintInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return PublicKey.findProgramAddress([raffleAccountAddress.toBytes(),Buffer.from('proceeds')],draffleClient.programId);case 2:_yield$PublicKey$find=_context.sent;_yield$PublicKey$find2=_slicedToArray(_yield$PublicKey$find,1);address=_yield$PublicKey$find2[0];_context.next=7;return connection.getAccountInfo(address);case 7:account=_context.sent;if(account){_context.next=10;break;}throw Error('Failed to fetch proceeds account');case 10:data=parseTokenAccount(account.data);tokenInfo=tokenInfoMap.get(data.mint.toString());if(tokenInfo){_context.next=14;break;}throw Error(\"Info not found for proceeds account mint \".concat(data.mint.toString()));case 14:mintInfo={name:tokenInfo.name,publicKey:data.mint,logoUrl:tokenInfo.logoURI,symbol:tokenInfo.symbol,decimals:tokenInfo.decimals};return _context.abrupt(\"return\",{address:address,mintInfo:mintInfo});case 16:case\"end\":return _context.stop();}}},_callee);}));return function fetchProceedsAccount(_x,_x2,_x3){return _ref.apply(this,arguments);};}();var getPrizeAddressForPrizeIndex=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(raffleAccountAddress,prizeIndex,programId){var _yield$PublicKey$find3,_yield$PublicKey$find4,prizeAddress;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return PublicKey.findProgramAddress([raffleAccountAddress.toBuffer(),Buffer.from('prize'),new u64(prizeIndex).toArrayLike(Buffer,'le',4)],programId);case 2:_yield$PublicKey$find3=_context2.sent;_yield$PublicKey$find4=_slicedToArray(_yield$PublicKey$find3,1);prizeAddress=_yield$PublicKey$find4[0];return _context2.abrupt(\"return\",prizeAddress);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function getPrizeAddressForPrizeIndex(_x4,_x5,_x6){return _ref2.apply(this,arguments);};}();// Batch fetch prize token accounts then batch fetch metadata accounts given mint\nexport var fetchPrizes=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(raffleAccountAddress,draffleClient,totalPrizes){var prizes,prizeAddresses,prizeAccounts,prizeTokenAccounts,metadataAddresses,metadataAccountsInfos,_iterator,_step,_step$value,index,prizeTokenAccount;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:prizes=[];_context3.next=3;return Promise.all(_toConsumableArray(Array(totalPrizes).keys()).map(function(prizeIndex){return getPrizeAddressForPrizeIndex(raffleAccountAddress,prizeIndex,draffleClient.programId);}));case 3:prizeAddresses=_context3.sent;_context3.next=6;return draffleClient.provider.connection.getMultipleAccountsInfo(prizeAddresses);case 6:prizeAccounts=_context3.sent;prizeTokenAccounts=prizeAccounts.map(function(prizeAccount){if(!prizeAccount){throw new Error('Invalid prize account');}return parseTokenAccount(prizeAccount.data);});_context3.next=10;return Promise.all(prizeTokenAccounts.map(function(prizeTokenAccount){return getMetadata(prizeTokenAccount.mint);}));case 10:metadataAddresses=_context3.sent;_context3.next=13;return draffleClient.provider.connection.getMultipleAccountsInfo(metadataAddresses);case 13:metadataAccountsInfos=_context3.sent;_iterator=_createForOfIteratorHelper(prizeTokenAccounts.entries());_context3.prev=15;_iterator.s();case 17:if((_step=_iterator.n()).done){_context3.next=26;break;}_step$value=_slicedToArray(_step.value,2),index=_step$value[0],prizeTokenAccount=_step$value[1];_context3.t0=prizes;_context3.next=22;return processPrize(prizeAddresses[index],prizeTokenAccount,metadataAccountsInfos[index]);case 22:_context3.t1=_context3.sent;_context3.t0.push.call(_context3.t0,_context3.t1);case 24:_context3.next=17;break;case 26:_context3.next=31;break;case 28:_context3.prev=28;_context3.t2=_context3[\"catch\"](15);_iterator.e(_context3.t2);case 31:_context3.prev=31;_iterator.f();return _context3.finish(31);case 34:return _context3.abrupt(\"return\",prizes);case 35:case\"end\":return _context3.stop();}}},_callee3,null,[[15,28,31,34]]);}));return function fetchPrizes(_x7,_x8,_x9){return _ref3.apply(this,arguments);};}();var processPrize=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(prizeAddress,prizeTokenAccount,metadataAccountInfo){var mintInfo,tokenInfo,_extensions,name,imageURI,meta,_tokenInfo;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:tokenInfo=tokenInfoMap.get(prizeTokenAccount.mint.toString());if(!tokenInfo){_context4.next=8;break;}name=\"\".concat(getDisplayAmount(prizeTokenAccount.amount,tokenInfo),\" \").concat(tokenInfo.symbol);imageURI=tokenInfo===null||tokenInfo===void 0?void 0:(_extensions=tokenInfo.extensions)===null||_extensions===void 0?void 0:_extensions.imageURI;mintInfo={name:name,publicKey:prizeTokenAccount.mint,logoUrl:tokenInfo.logoURI,symbol:tokenInfo.symbol,decimals:tokenInfo.decimals};return _context4.abrupt(\"return\",{address:prizeAddress,mint:mintInfo,amount:prizeTokenAccount.amount,type:PrizeType.FT,meta:{imageUri:imageURI||tokenInfo.logoURI}});case 8:if(!metadataAccountInfo){_context4.next=14;break;}_context4.next=11;return getNFTMetadata(metadataAccountInfo);case 11:_context4.t0=_context4.sent;_context4.next=15;break;case 14:_context4.t0=undefined;case 15:meta=_context4.t0;// TODO: Need to distinguish between NFT types to fill correct attributes\n_tokenInfo=UNKNOWN_TOKEN_INFO;mintInfo={name:(meta===null||meta===void 0?void 0:meta.name)||_tokenInfo.name,publicKey:prizeTokenAccount.mint,logoUrl:(meta===null||meta===void 0?void 0:meta.image)||_tokenInfo.logoURI,symbol:_tokenInfo.symbol,decimals:_tokenInfo.decimals};return _context4.abrupt(\"return\",{address:prizeAddress,mint:mintInfo,amount:prizeTokenAccount.amount,type:PrizeType.NFTPicture,meta:{name:(meta===null||meta===void 0?void 0:meta.name)||_tokenInfo.name,imageUri:(meta===null||meta===void 0?void 0:meta.image)||_tokenInfo.name}});case 19:case\"end\":return _context4.stop();}}},_callee4);}));return function processPrize(_x10,_x11,_x12){return _ref4.apply(this,arguments);};}();export var toEntrantsProcessed=function toEntrantsProcessed(entrantsDataRaw){var entrantsProcessed=entrantsDataRaw.entrants.slice(0,entrantsDataRaw.total).reduce(function(acc,entrant,index){if(acc.has(entrant.toString())){acc.get(entrant.toString()).tickets.push(index);}else{acc.set(entrant.toString(),{publicKey:entrant,tickets:[index]});}return acc;},new Map());return entrantsProcessed;};export var getRaffleProgramAccounts=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(draffleClient){var result,raffleDiscriminator,entrantsDiscriminator,raffleDataRawProgramAccounts,entrantsDataRawProgramAccounts;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return draffleClient.provider.connection.getProgramAccounts(draffleClient.programId);case 2:result=_context5.sent;raffleDiscriminator=AccountsCoder.accountDiscriminator('Raffle');entrantsDiscriminator=AccountsCoder.accountDiscriminator('Entrants');raffleDataRawProgramAccounts=[];entrantsDataRawProgramAccounts=[];result.forEach(function(_ref6){var pubkey=_ref6.pubkey,account=_ref6.account;var discriminator=account.data.slice(0,8);if(raffleDiscriminator.compare(discriminator)===0){raffleDataRawProgramAccounts.push({publicKey:pubkey,account:draffleClient.coder.accounts.decode('Raffle',account.data)});}else if(entrantsDiscriminator.compare(discriminator)===0){entrantsDataRawProgramAccounts.push({publicKey:pubkey,account:draffleClient.coder.accounts.decode('Entrants',account.data)});}else{console.log(\"Could not decode \".concat(pubkey.toBase58()));}});return _context5.abrupt(\"return\",[raffleDataRawProgramAccounts,entrantsDataRawProgramAccounts]);case 9:case\"end\":return _context5.stop();}}},_callee5);}));return function getRaffleProgramAccounts(_x13){return _ref5.apply(this,arguments);};}();","map":null,"metadata":{},"sourceType":"module"}