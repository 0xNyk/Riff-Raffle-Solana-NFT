{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Riff-Raffle-Solana-NFT build 1-1/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"C:/Riff-Raffle-Solana-NFT build 1-1/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Riff-Raffle-Solana-NFT build 1-1/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport assert from \"assert\";\nimport { PublicKey, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport { translateAddress } from \"../program/common\";\nimport { getProvider } from \"../provider\";\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\n\nexport function invoke(_x, _x2, _x3, _x4) {\n  return _invoke.apply(this, arguments);\n}\n\nfunction _invoke() {\n  _invoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(programId, accounts, data, provider) {\n    var tx;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            programId = translateAddress(programId);\n\n            if (!provider) {\n              provider = getProvider();\n            }\n\n            tx = new Transaction();\n            tx.add(new TransactionInstruction({\n              programId: programId,\n              keys: accounts !== null && accounts !== void 0 ? accounts : [],\n              data: data\n            }));\n            _context.next = 6;\n            return provider.send(tx);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _invoke.apply(this, arguments);\n}\n\nexport function getMultipleAccounts(_x5, _x6) {\n  return _getMultipleAccounts.apply(this, arguments);\n}\n\nfunction _getMultipleAccounts() {\n  _getMultipleAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection, publicKeys) {\n    var args, res, accounts, _iterator, _step, account, value, executable, owner, lamports, data;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            args = [publicKeys.map(function (k) {\n              return k.toBase58();\n            }), {\n              commitment: \"recent\"\n            }]; // @ts-ignore\n\n            _context2.next = 3;\n            return connection._rpcRequest(\"getMultipleAccounts\", args);\n\n          case 3:\n            res = _context2.sent;\n\n            if (!res.error) {\n              _context2.next = 6;\n              break;\n            }\n\n            throw new Error(\"failed to get info about accounts \" + publicKeys.map(function (k) {\n              return k.toBase58();\n            }).join(\", \") + \": \" + res.error.message);\n\n          case 6:\n            assert(typeof res.result !== \"undefined\");\n            accounts = [];\n            _iterator = _createForOfIteratorHelper(res.result.value);\n            _context2.prev = 9;\n\n            _iterator.s();\n\n          case 11:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 23;\n              break;\n            }\n\n            account = _step.value;\n            value = null;\n\n            if (!(account === null)) {\n              _context2.next = 17;\n              break;\n            }\n\n            accounts.push(null);\n            return _context2.abrupt(\"continue\", 21);\n\n          case 17:\n            if (res.result.value) {\n              executable = account.executable, owner = account.owner, lamports = account.lamports, data = account.data;\n              assert(data[1] === \"base64\");\n              value = {\n                executable: executable,\n                owner: new PublicKey(owner),\n                lamports: lamports,\n                data: Buffer.from(data[0], \"base64\")\n              };\n            }\n\n            if (!(value === null)) {\n              _context2.next = 20;\n              break;\n            }\n\n            throw new Error(\"Invalid response\");\n\n          case 20:\n            accounts.push(value);\n\n          case 21:\n            _context2.next = 11;\n            break;\n\n          case 23:\n            _context2.next = 28;\n            break;\n\n          case 25:\n            _context2.prev = 25;\n            _context2.t0 = _context2[\"catch\"](9);\n\n            _iterator.e(_context2.t0);\n\n          case 28:\n            _context2.prev = 28;\n\n            _iterator.f();\n\n            return _context2.finish(28);\n\n          case 31:\n            return _context2.abrupt(\"return\", accounts.map(function (account, idx) {\n              if (account === null) {\n                return null;\n              }\n\n              return {\n                publicKey: publicKeys[idx],\n                account: account\n              };\n            }));\n\n          case 32:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[9, 25, 28, 31]]);\n  }));\n  return _getMultipleAccounts.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}