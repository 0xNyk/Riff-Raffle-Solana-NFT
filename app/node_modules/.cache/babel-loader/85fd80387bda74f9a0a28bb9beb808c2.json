{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kroni\\\\Desktop\\\\RIFF RAFFLE SITE PNSC\\\\Riff-Raffle-Solana-NFT final\\\\app\\\\src\\\\providers\\\\ViewportProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let DeviceType;\n\n(function (DeviceType) {\n  DeviceType[DeviceType[\"Phone\"] = 0] = \"Phone\";\n  DeviceType[DeviceType[\"Tablet\"] = 1] = \"Tablet\";\n  DeviceType[DeviceType[\"Desktop\"] = 2] = \"Desktop\";\n})(DeviceType || (DeviceType = {}));\n\nconst PHONE_BREAKPOINT = 600;\nconst TABLET_BREAKPOINT = 768;\n// @ts-ignore\nexport const ViewportContext = /*#__PURE__*/React.createContext();\n\nconst ViewportProvider = ({\n  children\n}) => {\n  _s();\n\n  const [device, setDevice] = React.useState(DeviceType.Desktop);\n  React.useEffect(() => {\n    const handleWindowResize = () => {\n      if (window.innerWidth < PHONE_BREAKPOINT && device !== DeviceType.Phone) setDevice(DeviceType.Phone);else if (window.innerWidth < TABLET_BREAKPOINT && device !== DeviceType.Tablet) setDevice(DeviceType.Tablet);else if (window.innerWidth >= TABLET_BREAKPOINT && device !== DeviceType.Desktop) setDevice(DeviceType.Desktop);\n    };\n\n    handleWindowResize();\n    window.addEventListener('resize', handleWindowResize);\n    return () => window.removeEventListener('resize', handleWindowResize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ViewportContext.Provider, {\n    value: {\n      device\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewportProvider, \"X/sUrBTTn8Pn6995V+Gt4JnXdyk=\");\n\n_c = ViewportProvider;\nexport default ViewportProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewportProvider\");","map":{"version":3,"sources":["C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/src/providers/ViewportProvider.tsx"],"names":["React","DeviceType","PHONE_BREAKPOINT","TABLET_BREAKPOINT","ViewportContext","createContext","ViewportProvider","children","device","setDevice","useState","Desktop","useEffect","handleWindowResize","window","innerWidth","Phone","Tablet","addEventListener","removeEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;;AAEA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U;;AAMZ,MAAMC,gBAAgB,GAAG,GAAzB;AACA,MAAMC,iBAAiB,GAAG,GAA1B;AAMA;AACA,OAAO,MAAMC,eAAe,gBAAGJ,KAAK,CAACK,aAAN,EAAxB;;AAEP,MAAMC,gBAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC7C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,KAAK,CAACU,QAAN,CAAeT,UAAU,CAACU,OAA1B,CAA5B;AAEAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,UAAMC,kBAAkB,GAAG,MAAM;AAC/B,UAAIC,MAAM,CAACC,UAAP,GAAoBb,gBAApB,IAAwCM,MAAM,KAAKP,UAAU,CAACe,KAAlE,EACEP,SAAS,CAACR,UAAU,CAACe,KAAZ,CAAT,CADF,KAEK,IACHF,MAAM,CAACC,UAAP,GAAoBZ,iBAApB,IACAK,MAAM,KAAKP,UAAU,CAACgB,MAFnB,EAIHR,SAAS,CAACR,UAAU,CAACgB,MAAZ,CAAT,CAJG,KAKA,IACHH,MAAM,CAACC,UAAP,IAAqBZ,iBAArB,IACAK,MAAM,KAAKP,UAAU,CAACU,OAFnB,EAIHF,SAAS,CAACR,UAAU,CAACU,OAAZ,CAAT;AACH,KAbD;;AAcAE,IAAAA,kBAAkB;AAClBC,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCL,kBAAlC;AACA,WAAO,MAAMC,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCN,kBAArC,CAAb;AACD,GAlBD,EAkBG,EAlBH;AAoBA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEL,MAAAA;AAAF,KAAjC;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5BD;;GAAMD,gB;;KAAAA,gB;AA8BN,eAAeA,gBAAf","sourcesContent":["import React, { FC } from 'react';\r\n\r\nexport enum DeviceType {\r\n  Phone = 0,\r\n  Tablet = 1,\r\n  Desktop = 2,\r\n}\r\n\r\nconst PHONE_BREAKPOINT = 600;\r\nconst TABLET_BREAKPOINT = 768;\r\n\r\nexport interface ViewportInfo {\r\n  device: DeviceType;\r\n}\r\n\r\n// @ts-ignore\r\nexport const ViewportContext = React.createContext<ViewportInfo>();\r\n\r\nconst ViewportProvider: FC = ({ children }) => {\r\n  const [device, setDevice] = React.useState(DeviceType.Desktop);\r\n\r\n  React.useEffect(() => {\r\n    const handleWindowResize = () => {\r\n      if (window.innerWidth < PHONE_BREAKPOINT && device !== DeviceType.Phone)\r\n        setDevice(DeviceType.Phone);\r\n      else if (\r\n        window.innerWidth < TABLET_BREAKPOINT &&\r\n        device !== DeviceType.Tablet\r\n      )\r\n        setDevice(DeviceType.Tablet);\r\n      else if (\r\n        window.innerWidth >= TABLET_BREAKPOINT &&\r\n        device !== DeviceType.Desktop\r\n      )\r\n        setDevice(DeviceType.Desktop);\r\n    };\r\n    handleWindowResize();\r\n    window.addEventListener('resize', handleWindowResize);\r\n    return () => window.removeEventListener('resize', handleWindowResize);\r\n  }, []);\r\n\r\n  return (\r\n    <ViewportContext.Provider value={{ device }}>\r\n      {children}\r\n    </ViewportContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ViewportProvider;\r\n"]},"metadata":{},"sourceType":"module"}