{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kroni\\\\Desktop\\\\RIFF RAFFLE SITE PNSC\\\\Riff-Raffle-Solana-NFT\\\\app\\\\src\\\\components\\\\Wallet\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo } from 'react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { getPhantomWallet, getSolflareWallet, getSolletWallet, getSolletExtensionWallet, getSlopeWallet } from '@solana/wallet-adapter-wallets';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Extension;\n\n(function (Extension) {\n  Extension[\"Localnet\"] = \"localnet\";\n})(Extension || (Extension = {}));\n\nconst extendedClusterApiUrl = network => {\n  return network === Extension.Localnet ? process.env.REACT_APP_RPC_ENDPOINT || 'https://draffle.ngrok.io' : clusterApiUrl(network);\n};\n\nconst Wallet = ({\n  children\n}) => {\n  _s();\n\n  const network = Extension.Localnet;\n  const endpoint = useMemo(() => extendedClusterApiUrl(network), [network]); // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n  // Only the wallets you want to support will be compiled into your application\n\n  const wallets = useMemo(() => [getPhantomWallet(), getSolflareWallet(), getSlopeWallet(), getSolletWallet({\n    network: network\n  }), getSolletExtensionWallet({\n    network: network\n  })], [network]);\n  const onError = useCallback(error => {\n    toast.error(error.message ? `${error.name}: ${error.message}` : error.name);\n    console.error(error);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n    endpoint: endpoint,\n    children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n      wallets: wallets,\n      onError: onError,\n      autoConnect: true,\n      children: /*#__PURE__*/_jsxDEV(WalletDialogProvider, {\n        featuredWallets: 5,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Wallet, \"d0lP12HGMx9seVZpfPNa1u9wI+8=\");\n\n_c = Wallet;\nexport default Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"sources":["C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT/app/src/components/Wallet/index.tsx"],"names":["React","useCallback","useMemo","WalletDialogProvider","ConnectionProvider","WalletProvider","getPhantomWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","getSlopeWallet","clusterApiUrl","toast","Extension","extendedClusterApiUrl","network","Localnet","process","env","REACT_APP_RPC_ENDPOINT","Wallet","children","endpoint","wallets","onError","error","message","name","console"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,WAApB,EAAiCC,OAAjC,QAAgD,OAAhD;AAEA,SAASC,oBAAT,QAAqC,oCAArC;AACA,SACEC,kBADF,EAEEC,cAFF,QAGO,8BAHP;AAIA,SACEC,gBADF,EAEEC,iBAFF,EAGEC,eAHF,EAIEC,wBAJF,EAKEC,cALF,QAMO,gCANP;AAOA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;IAEKC,S;;WAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAIL,MAAMC,qBAAqB,GAAIC,OAAD,IAA+C;AAC3E,SAAOA,OAAO,KAAKF,SAAS,CAACG,QAAtB,GACFC,OAAO,CAACC,GAAR,CAAYC,sBAAb,IACE,0BAFC,GAGHR,aAAa,CAACI,OAAD,CAHjB;AAID,CALD;;AAOA,MAAMK,MAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACnC,QAAMN,OAAO,GAAGF,SAAS,CAACG,QAA1B;AACA,QAAMM,QAAQ,GAAGpB,OAAO,CAAC,MAAMY,qBAAqB,CAACC,OAAD,CAA5B,EAAuC,CAACA,OAAD,CAAvC,CAAxB,CAFmC,CAInC;AACA;;AACA,QAAMQ,OAAO,GAAGrB,OAAO,CACrB,MAAM,CACJI,gBAAgB,EADZ,EAEJC,iBAAiB,EAFb,EAGJG,cAAc,EAHV,EAIJF,eAAe,CAAC;AAAEO,IAAAA,OAAO,EAAEA;AAAX,GAAD,CAJX,EAKJN,wBAAwB,CAAC;AACvBM,IAAAA,OAAO,EAAEA;AADc,GAAD,CALpB,CADe,EAUrB,CAACA,OAAD,CAVqB,CAAvB;AAaA,QAAMS,OAAO,GAAGvB,WAAW,CAAEwB,KAAD,IAAwB;AAClDb,IAAAA,KAAK,CAACa,KAAN,CAAYA,KAAK,CAACC,OAAN,GAAiB,GAAED,KAAK,CAACE,IAAK,KAAIF,KAAK,CAACC,OAAQ,EAAhD,GAAoDD,KAAK,CAACE,IAAtE;AACAC,IAAAA,OAAO,CAACH,KAAR,CAAcA,KAAd;AACD,GAH0B,EAGxB,EAHwB,CAA3B;AAKA,sBACE,QAAC,kBAAD;AAAoB,IAAA,QAAQ,EAAEH,QAA9B;AAAA,2BACE,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAEC,OAAzB;AAAkC,MAAA,OAAO,EAAEC,OAA3C;AAAoD,MAAA,WAAW,MAA/D;AAAA,6BACE,QAAC,oBAAD;AAAsB,QAAA,eAAe,EAAE,CAAvC;AAAA,kBACGH;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAjCD;;GAAMD,M;;KAAAA,M;AAmCN,eAAeA,MAAf","sourcesContent":["import React, { FC, useCallback, useMemo } from 'react';\r\nimport { WalletAdapterNetwork, WalletError } from '@solana/wallet-adapter-base';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport {\r\n  getPhantomWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n  getSlopeWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport toast from 'react-hot-toast';\r\n\r\nenum Extension {\r\n  Localnet = 'localnet',\r\n}\r\n\r\nconst extendedClusterApiUrl = (network: WalletAdapterNetwork | Extension) => {\r\n  return network === Extension.Localnet\r\n    ? (process.env.REACT_APP_RPC_ENDPOINT as string) ||\r\n        'https://draffle.ngrok.io'\r\n    : clusterApiUrl(network);\r\n};\r\n\r\nconst Wallet: FC = ({ children }) => {\r\n  const network = Extension.Localnet;\r\n  const endpoint = useMemo(() => extendedClusterApiUrl(network), [network]);\r\n\r\n  // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\r\n  // Only the wallets you want to support will be compiled into your application\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network: network as unknown as WalletAdapterNetwork }),\r\n      getSolletExtensionWallet({\r\n        network: network as unknown as WalletAdapterNetwork,\r\n      }),\r\n    ],\r\n    [network]\r\n  );\r\n\r\n  const onError = useCallback((error: WalletError) => {\r\n    toast.error(error.message ? `${error.name}: ${error.message}` : error.name);\r\n    console.error(error);\r\n  }, []);\r\n\r\n  return (\r\n    <ConnectionProvider endpoint={endpoint}>\r\n      <WalletProvider wallets={wallets} onError={onError} autoConnect>\r\n        <WalletDialogProvider featuredWallets={5}>\r\n          {children}\r\n        </WalletDialogProvider>\r\n      </WalletProvider>\r\n    </ConnectionProvider>\r\n  );\r\n};\r\n\r\nexport default Wallet;\r\n"]},"metadata":{},"sourceType":"module"}