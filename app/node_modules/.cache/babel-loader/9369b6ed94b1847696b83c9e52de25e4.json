{"ast":null,"code":"import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Keypair, PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nconst DT_MINT = new PublicKey(\"zRpVjG5wMWrNhpTtSiGMz9iBaMTQDdaVGCFLmYqCs4U\");\nconst AIRDROPPER_KEYPAIR = Keypair.fromSecretKey(new Uint8Array(JSON.parse(process.env.REACT_APP_AIRDROPPER_KEYPAIR)));\nexport const airdrop = async (connection, user) => {\n  const aidropperATA = await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, DT_MINT, AIRDROPPER_KEYPAIR.publicKey);\n  const userATA = await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, DT_MINT, user);\n  let instructions = [];\n  const info = await connection.getAccountInfo(userATA);\n\n  if (info === null) {\n    instructions.push(Token.createAssociatedTokenAccountInstruction(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, DT_MINT, userATA, user, AIRDROPPER_KEYPAIR.publicKey));\n  }\n\n  instructions.push(Token.createTransferInstruction(TOKEN_PROGRAM_ID, aidropperATA, userATA, AIRDROPPER_KEYPAIR.publicKey, [], 3000000));\n  instructions.push(SystemProgram.transfer({\n    fromPubkey: AIRDROPPER_KEYPAIR.publicKey,\n    toPubkey: user,\n    lamports: 500000000\n  }));\n  const tx = new Transaction({\n    feePayer: AIRDROPPER_KEYPAIR.publicKey\n  });\n  tx.add(...instructions);\n  await connection.sendTransaction(tx, [AIRDROPPER_KEYPAIR]);\n};","map":{"version":3,"sources":["C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/src/lib/utils/airdrop.ts"],"names":["ASSOCIATED_TOKEN_PROGRAM_ID","Token","TOKEN_PROGRAM_ID","Keypair","PublicKey","SystemProgram","Transaction","DT_MINT","AIRDROPPER_KEYPAIR","fromSecretKey","Uint8Array","JSON","parse","process","env","REACT_APP_AIRDROPPER_KEYPAIR","airdrop","connection","user","aidropperATA","getAssociatedTokenAddress","publicKey","userATA","instructions","info","getAccountInfo","push","createAssociatedTokenAccountInstruction","createTransferInstruction","transfer","fromPubkey","toPubkey","lamports","tx","feePayer","add","sendTransaction"],"mappings":"AAAA,SAASA,2BAAT,EAAsCC,KAAtC,EAA6CC,gBAA7C,QAAqE,mBAArE;AACA,SAAqBC,OAArB,EAA8BC,SAA9B,EAAyCC,aAAzC,EAAwDC,WAAxD,QAAmG,iBAAnG;AAEA,MAAMC,OAAO,GAAG,IAAIH,SAAJ,CAAc,6CAAd,CAAhB;AACA,MAAMI,kBAAkB,GAAGL,OAAO,CAACM,aAAR,CACzB,IAAIC,UAAJ,CAAeC,IAAI,CAACC,KAAL,CAAWC,OAAO,CAACC,GAAR,CAAYC,4BAAvB,CAAf,CADyB,CAA3B;AAIA,OAAO,MAAMC,OAAO,GAAG,OAAOC,UAAP,EAA+BC,IAA/B,KAAmD;AACxE,QAAMC,YAAY,GAAG,MAAMlB,KAAK,CAACmB,yBAAN,CACzBpB,2BADyB,EAEzBE,gBAFyB,EAGzBK,OAHyB,EAIzBC,kBAAkB,CAACa,SAJM,CAA3B;AAOA,QAAMC,OAAO,GAAG,MAAMrB,KAAK,CAACmB,yBAAN,CACpBpB,2BADoB,EAEpBE,gBAFoB,EAGpBK,OAHoB,EAIpBW,IAJoB,CAAtB;AAOA,MAAIK,YAAsC,GAAG,EAA7C;AACA,QAAMC,IAAI,GAAG,MAAMP,UAAU,CAACQ,cAAX,CAA0BH,OAA1B,CAAnB;;AACA,MAAIE,IAAI,KAAK,IAAb,EAAmB;AACjBD,IAAAA,YAAY,CAACG,IAAb,CACEzB,KAAK,CAAC0B,uCAAN,CACE3B,2BADF,EAEEE,gBAFF,EAGEK,OAHF,EAIEe,OAJF,EAKEJ,IALF,EAMEV,kBAAkB,CAACa,SANrB,CADF;AAUD;;AACDE,EAAAA,YAAY,CAACG,IAAb,CACEzB,KAAK,CAAC2B,yBAAN,CACE1B,gBADF,EAEEiB,YAFF,EAGEG,OAHF,EAIEd,kBAAkB,CAACa,SAJrB,EAKE,EALF,EAME,OANF,CADF;AAUAE,EAAAA,YAAY,CAACG,IAAb,CACErB,aAAa,CAACwB,QAAd,CAAuB;AACrBC,IAAAA,UAAU,EAAEtB,kBAAkB,CAACa,SADV;AAErBU,IAAAA,QAAQ,EAAEb,IAFW;AAGrBc,IAAAA,QAAQ,EAAE;AAHW,GAAvB,CADF;AAQA,QAAMC,EAAE,GAAG,IAAI3B,WAAJ,CAAgB;AAAC4B,IAAAA,QAAQ,EAAE1B,kBAAkB,CAACa;AAA9B,GAAhB,CAAX;AACAY,EAAAA,EAAE,CAACE,GAAH,CAAO,GAAGZ,YAAV;AACA,QAAMN,UAAU,CAACmB,eAAX,CAA2BH,EAA3B,EAA+B,CAACzB,kBAAD,CAA/B,CAAN;AACD,CAlDM","sourcesContent":["import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { Connection, Keypair, PublicKey, SystemProgram, Transaction, TransactionInstruction } from \"@solana/web3.js\";\r\n\r\nconst DT_MINT = new PublicKey(\"zRpVjG5wMWrNhpTtSiGMz9iBaMTQDdaVGCFLmYqCs4U\");\r\nconst AIRDROPPER_KEYPAIR = Keypair.fromSecretKey(\r\n  new Uint8Array(JSON.parse(process.env.REACT_APP_AIRDROPPER_KEYPAIR as string))\r\n);\r\n\r\nexport const airdrop = async (connection: Connection, user: PublicKey) => {\r\n  const aidropperATA = await Token.getAssociatedTokenAddress(\r\n    ASSOCIATED_TOKEN_PROGRAM_ID,\r\n    TOKEN_PROGRAM_ID,\r\n    DT_MINT,\r\n    AIRDROPPER_KEYPAIR.publicKey\r\n  );\r\n\r\n  const userATA = await Token.getAssociatedTokenAddress(\r\n    ASSOCIATED_TOKEN_PROGRAM_ID,\r\n    TOKEN_PROGRAM_ID,\r\n    DT_MINT,\r\n    user\r\n  );\r\n\r\n  let instructions: TransactionInstruction[] = [];\r\n  const info = await connection.getAccountInfo(userATA);\r\n  if (info === null) {\r\n    instructions.push(\r\n      Token.createAssociatedTokenAccountInstruction(\r\n        ASSOCIATED_TOKEN_PROGRAM_ID,\r\n        TOKEN_PROGRAM_ID,\r\n        DT_MINT,\r\n        userATA,\r\n        user,\r\n        AIRDROPPER_KEYPAIR.publicKey\r\n      ),\r\n    );\r\n  }\r\n  instructions.push(\r\n    Token.createTransferInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      aidropperATA,\r\n      userATA,\r\n      AIRDROPPER_KEYPAIR.publicKey,\r\n      [],\r\n      3_000_000,\r\n    )\r\n  )\r\n  instructions.push(\r\n    SystemProgram.transfer({\r\n      fromPubkey: AIRDROPPER_KEYPAIR.publicKey,\r\n      toPubkey: user,\r\n      lamports: 500_000_000\r\n    })\r\n  )\r\n\r\n  const tx = new Transaction({feePayer: AIRDROPPER_KEYPAIR.publicKey});\r\n  tx.add(...instructions);\r\n  await connection.sendTransaction(tx, [AIRDROPPER_KEYPAIR]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}