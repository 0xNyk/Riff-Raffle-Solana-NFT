{"ast":null,"code":"var _jsxFileName = \"C:\\\\Riff-Raffle-Solana-NFT build 1-1\\\\app\\\\src\\\\pages\\\\admin\\\\AdminHomeScreen\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, Grid, IconButton, Typography } from '@material-ui/core';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Add } from '@material-ui/icons';\nimport { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport BN from 'bn.js';\nimport Screen from '../../../components/layout/Screen';\nimport WalletButton from '../../../components/layout/WalletButton';\nimport Spacer from '../../../components/Spacer';\nimport { useRafflesStore } from '../../../hooks/useRafflesStore';\nimport { useProgramApis } from '../../../hooks/useProgramApis';\nimport { routes } from '../../../router/routes';\nimport { useStyles } from './styles';\nimport { DISPENSER_REGISTRY_ADDRESS, DISPENSER_REGISTRY_KEYPAIR } from '../../../config/programIds';\nimport { shortenPubkeyString } from '../../../lib/utils';\nimport { VAULT_TOKEN_IN, VAULT_TOKEN_OUT } from '../../../config/accounts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AdminHomeScreen = () => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    connected\n  } = useWallet();\n  const {\n    push\n  } = useHistory();\n  const {\n    raffles,\n    fetchAllRaffles\n  } = useRafflesStore();\n  const {\n    dispenserClient\n  } = useProgramApis();\n  const [dispensers, setDispensers] = useState([]);\n  useEffect(() => {\n    fetchAllRaffles(true);\n  }, [fetchAllRaffles]);\n  useEffect(() => {\n    dispenserClient.account.registry.all().then(setDispensers);\n  }, [dispenserClient, setDispensers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: connected ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          children: \"Dispensers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          size: 'small',\n          onClick: () => {\n            dispenserClient.rpc.createRegistry(new BN(500000000), new BN(1000000), {\n              accounts: {\n                registry: DISPENSER_REGISTRY_ADDRESS,\n                vaultTokenIn: VAULT_TOKEN_IN,\n                vaultTokenOut: VAULT_TOKEN_OUT,\n                admin: dispenserClient.provider.wallet.publicKey,\n                mintTokenIn: new PublicKey('So11111111111111111111111111111111111111112'),\n                mintTokenOut: new PublicKey('zRpVjG5wMWrNhpTtSiGMz9iBaMTQDdaVGCFLmYqCs4U'),\n                tokenProgram: TOKEN_PROGRAM_ID,\n                systemProgram: SystemProgram.programId,\n                rent: SYSVAR_RENT_PUBKEY\n              },\n              signers: [DISPENSER_REGISTRY_KEYPAIR]\n            }).then(res => console.log(res));\n          },\n          children: /*#__PURE__*/_jsxDEV(Add, {\n            className: classes.scrollButtonIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Spacer, {\n        height: '20px'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), dispensers.length === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"No dispenser found.\"\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        className: classes.raffleGrid,\n        children: dispensers.map(dispenser => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          spacing: 3,\n          className: classes.raffleGridItem,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.raffleCard,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Admin: \", shortenPubkeyString(dispenser.account.admin)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"In: \", shortenPubkeyString(dispenser.account.mintTokenIn)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: ['->', \" Vault:\", ' ', shortenPubkeyString(dispenser.account.vaultTokenIn)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Out: \", shortenPubkeyString(dispenser.account.mintTokenOut)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: ['->', \" Vault:\", ' ', shortenPubkeyString(dispenser.account.vaultTokenOut)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 19\n          }, this)\n        }, dispenser.publicKey.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Spacer, {\n        height: '20px'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: \"Ongoing raffles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Spacer, {\n        height: '20px'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        className: classes.raffleGrid,\n        children: [...raffles.values()].filter(raffle => new Date() <= raffle.endTimestamp).map(raffle => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          spacing: 3,\n          className: classes.raffleGridItem,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.raffleCard,\n            onClick: () => push(`${routes.ADMIN.RAFFLES}/${raffle.publicKey}`),\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: raffle.metadata.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                children: raffle.endTimestamp.toISOString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Spacer, {\n        height: '50px'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: \"Ended raffles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Spacer, {\n        height: '20px'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        className: classes.raffleGrid,\n        children: [...raffles.values()].filter(raffle => new Date() > raffle.endTimestamp).map(raffle => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          spacing: 3,\n          className: classes.raffleGridItem,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.raffleCard,\n            onClick: () => push(`${routes.ADMIN.RAFFLES}/${raffle.publicKey}`),\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: raffle.metadata.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: raffle.endTimestamp.toISOString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 19\n          }, this)\n        }, raffle.publicKey.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: \"Connect with an admin wallet to unlock admin panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.walletButtonContainer,\n        children: /*#__PURE__*/_jsxDEV(WalletButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AdminHomeScreen, \"SNpLyUkY7CMnuhjdhHFwzoNK3R0=\", false, function () {\n  return [useStyles, useWallet, useHistory, useRafflesStore, useProgramApis];\n});\n\n_c = AdminHomeScreen;\n\nconst AdminHomeScreenWithLayout = () => /*#__PURE__*/_jsxDEV(Screen, {\n  children: /*#__PURE__*/_jsxDEV(AdminHomeScreen, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 192,\n  columnNumber: 3\n}, this);\n\n_c2 = AdminHomeScreenWithLayout;\nexport default AdminHomeScreenWithLayout;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AdminHomeScreen\");\n$RefreshReg$(_c2, \"AdminHomeScreenWithLayout\");","map":{"version":3,"sources":["C:/Riff-Raffle-Solana-NFT build 1-1/app/src/pages/admin/AdminHomeScreen/index.tsx"],"names":["Card","Grid","IconButton","Typography","useWallet","useEffect","useState","useHistory","Add","PublicKey","SystemProgram","SYSVAR_RENT_PUBKEY","TOKEN_PROGRAM_ID","BN","Screen","WalletButton","Spacer","useRafflesStore","useProgramApis","routes","useStyles","DISPENSER_REGISTRY_ADDRESS","DISPENSER_REGISTRY_KEYPAIR","shortenPubkeyString","VAULT_TOKEN_IN","VAULT_TOKEN_OUT","AdminHomeScreen","classes","connected","push","raffles","fetchAllRaffles","dispenserClient","dispensers","setDispensers","account","registry","all","then","root","display","flexDirection","justifyContent","alignItems","rpc","createRegistry","accounts","vaultTokenIn","vaultTokenOut","admin","provider","wallet","publicKey","mintTokenIn","mintTokenOut","tokenProgram","systemProgram","programId","rent","signers","res","console","log","scrollButtonIcon","length","raffleGrid","map","dispenser","raffleGridItem","raffleCard","toString","values","filter","raffle","Date","endTimestamp","ADMIN","RAFFLES","metadata","name","toISOString","walletButtonContainer","AdminHomeScreenWithLayout"],"mappings":"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","sourcesContent":["import { Card, Grid, IconButton, Typography } from '@material-ui/core';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { FC, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { Add } from '@material-ui/icons';\r\nimport { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport BN from 'bn.js';\r\n\r\nimport Screen from '../../../components/layout/Screen';\r\nimport WalletButton from '../../../components/layout/WalletButton';\r\nimport Spacer from '../../../components/Spacer';\r\nimport { useRafflesStore } from '../../../hooks/useRafflesStore';\r\nimport { useProgramApis } from '../../../hooks/useProgramApis';\r\nimport { DispenserRegistryRaw } from '../../../providers/ProgramApisProvider';\r\nimport { routes } from '../../../router/routes';\r\nimport { useStyles } from './styles';\r\nimport {\r\n  DISPENSER_REGISTRY_ADDRESS,\r\n  DISPENSER_REGISTRY_KEYPAIR,\r\n} from '../../../config/programIds';\r\nimport { shortenPubkeyString } from '../../../lib/utils';\r\nimport { VAULT_TOKEN_IN, VAULT_TOKEN_OUT } from '../../../config/accounts';\r\n\r\nconst AdminHomeScreen: FC = () => {\r\n  const classes = useStyles();\r\n  const { connected } = useWallet();\r\n  const { push } = useHistory();\r\n  const { raffles, fetchAllRaffles } = useRafflesStore();\r\n  const { dispenserClient } = useProgramApis();\r\n\r\n  const [dispensers, setDispensers] = useState<\r\n    { account: DispenserRegistryRaw; publicKey: PublicKey }[]\r\n  >([]);\r\n\r\n  useEffect(() => {\r\n    fetchAllRaffles(true);\r\n  }, [fetchAllRaffles]);\r\n\r\n  useEffect(() => {\r\n    dispenserClient.account.registry.all().then(setDispensers);\r\n  }, [dispenserClient, setDispensers]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {connected ? (\r\n        <>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <Typography variant=\"h3\">Dispensers</Typography>\r\n            <IconButton\r\n              size={'small'}\r\n              onClick={() => {\r\n                dispenserClient.rpc\r\n                  .createRegistry(new BN(500_000_000), new BN(1_000_000), {\r\n                    accounts: {\r\n                      registry: DISPENSER_REGISTRY_ADDRESS,\r\n                      vaultTokenIn: VAULT_TOKEN_IN,\r\n                      vaultTokenOut: VAULT_TOKEN_OUT,\r\n                      admin: dispenserClient.provider.wallet.publicKey,\r\n                      mintTokenIn: new PublicKey(\r\n                        'So11111111111111111111111111111111111111112'\r\n                      ),\r\n                      mintTokenOut: new PublicKey(\r\n                        'zRpVjG5wMWrNhpTtSiGMz9iBaMTQDdaVGCFLmYqCs4U'\r\n                      ),\r\n                      tokenProgram: TOKEN_PROGRAM_ID,\r\n                      systemProgram: SystemProgram.programId,\r\n                      rent: SYSVAR_RENT_PUBKEY,\r\n                    },\r\n                    signers: [DISPENSER_REGISTRY_KEYPAIR],\r\n                  })\r\n                  .then((res) => console.log(res));\r\n              }}\r\n            >\r\n              <Add className={classes.scrollButtonIcon} />\r\n            </IconButton>\r\n          </div>\r\n          <Spacer height={'20px'} />\r\n          {dispensers.length === 0 ? (\r\n            <>No dispenser found.</>\r\n          ) : (\r\n            <Grid container spacing={1} className={classes.raffleGrid}>\r\n              {dispensers.map((dispenser) => (\r\n                <Grid\r\n                  key={dispenser.publicKey.toString()}\r\n                  item\r\n                  xs={3}\r\n                  spacing={3}\r\n                  className={classes.raffleGridItem}\r\n                >\r\n                  <Card className={classes.raffleCard}>\r\n                    <Typography>\r\n                      Admin: {shortenPubkeyString(dispenser.account.admin)}\r\n                    </Typography>\r\n                    <Typography>\r\n                      In: {shortenPubkeyString(dispenser.account.mintTokenIn)}\r\n                    </Typography>\r\n                    <Typography>\r\n                      {'->'} Vault:{' '}\r\n                      {shortenPubkeyString(dispenser.account.vaultTokenIn)}\r\n                    </Typography>\r\n                    <Typography>\r\n                      Out: {shortenPubkeyString(dispenser.account.mintTokenOut)}\r\n                    </Typography>\r\n                    <Typography>\r\n                      {'->'} Vault:{' '}\r\n                      {shortenPubkeyString(dispenser.account.vaultTokenOut)}\r\n                    </Typography>\r\n                  </Card>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          )}\r\n          <Spacer height={'20px'} />\r\n          <Typography variant=\"h3\">Ongoing raffles</Typography>\r\n          <Spacer height={'20px'} />\r\n          <Grid container spacing={1} className={classes.raffleGrid}>\r\n            {[...raffles.values()]\r\n              .filter((raffle) => new Date() <= raffle.endTimestamp)\r\n              .map((raffle) => (\r\n                <Grid\r\n                  item\r\n                  xs={3}\r\n                  spacing={3}\r\n                  className={classes.raffleGridItem}\r\n                >\r\n                  <Card\r\n                    className={classes.raffleCard}\r\n                    onClick={() =>\r\n                      push(`${routes.ADMIN.RAFFLES}/${raffle.publicKey}`)\r\n                    }\r\n                  >\r\n                    <Typography>{raffle.metadata.name}</Typography>\r\n                    <Typography>\r\n                      <Typography>\r\n                        {raffle.endTimestamp.toISOString()}\r\n                      </Typography>\r\n                    </Typography>\r\n                  </Card>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n          <Spacer height={'50px'} />\r\n          <Typography variant=\"h3\">Ended raffles</Typography>\r\n          <Spacer height={'20px'} />\r\n          <Grid container spacing={1} className={classes.raffleGrid}>\r\n            {[...raffles.values()]\r\n              .filter((raffle) => new Date() > raffle.endTimestamp)\r\n              .map((raffle) => (\r\n                <Grid\r\n                  key={raffle.publicKey.toString()}\r\n                  item\r\n                  xs={3}\r\n                  spacing={3}\r\n                  className={classes.raffleGridItem}\r\n                >\r\n                  <Card\r\n                    className={classes.raffleCard}\r\n                    onClick={() =>\r\n                      push(`${routes.ADMIN.RAFFLES}/${raffle.publicKey}`)\r\n                    }\r\n                  >\r\n                    <Typography>{raffle.metadata.name}</Typography>\r\n                    <Typography>{raffle.endTimestamp.toISOString()}</Typography>\r\n                  </Card>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Typography variant=\"h3\">\r\n            Connect with an admin wallet to unlock admin panel\r\n          </Typography>\r\n          <div className={classes.walletButtonContainer}>\r\n            <WalletButton />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AdminHomeScreenWithLayout = () => (\r\n  <Screen>\r\n    <AdminHomeScreen />\r\n  </Screen>\r\n);\r\n\r\nexport default AdminHomeScreenWithLayout;\r\n"]},"metadata":{},"sourceType":"module"}