{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT final/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeWallet = exports.Provider = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar simulate_transaction_1 = require(\"./simulate-transaction\");\n\nvar Provider = /*#__PURE__*/function () {\n  function Provider(connection, wallet, opts) {\n    _classCallCheck(this, Provider);\n\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n  }\n\n  _createClass(Provider, [{\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx, signers, opts) {\n        var _a, signerKps, signerPubkeys, rawTx, txId, r;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (signers === undefined) {\n                  signers = [];\n                }\n\n                if (opts === undefined) {\n                  opts = this.opts;\n                }\n\n                signerKps = signers.filter(function (s) {\n                  return s !== undefined;\n                });\n                signerPubkeys = [this.wallet.publicKey].concat(signerKps.map(function (s) {\n                  return s.publicKey;\n                }));\n                tx.setSigners.apply(tx, _toConsumableArray(signerPubkeys));\n                _context.next = 7;\n                return this.connection.getRecentBlockhash(opts.preflightCommitment);\n\n              case 7:\n                tx.recentBlockhash = _context.sent.blockhash;\n                _context.next = 10;\n                return this.wallet.signTransaction(tx);\n\n              case 10:\n                signerKps.forEach(function (kp) {\n                  tx.partialSign(kp);\n                });\n                rawTx = tx.serialize();\n                _context.prev = 12;\n                _context.next = 15;\n                return web3_js_1.sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n\n              case 15:\n                txId = _context.sent;\n                return _context.abrupt(\"return\", txId);\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](12);\n                console.error('Transaction failed. Simulating for logs...');\n                _context.next = 24;\n                return simulate_transaction_1.simulateTransaction(this.connection, tx, (_a = opts.commitment) !== null && _a !== void 0 ? _a : 'recent');\n\n              case 24:\n                r = _context.sent;\n                console.error(r);\n                throw _context.t0;\n\n              case 27:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[12, 19]]);\n      }));\n\n      function send(_x, _x2, _x3) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }, {\n    key: \"sendAll\",\n    value: function () {\n      var _sendAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(reqs, opts) {\n        var _this = this;\n\n        var _a, blockhash, txs, signedTxs, sigs, k, tx, rawTx, r;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (opts === undefined) {\n                  opts = this.opts;\n                }\n\n                _context2.next = 3;\n                return this.connection.getRecentBlockhash(opts.preflightCommitment);\n\n              case 3:\n                blockhash = _context2.sent;\n                txs = reqs.map(function (r) {\n                  var tx = r.tx;\n                  var signers = r.signers;\n\n                  if (signers === undefined) {\n                    signers = [];\n                  }\n\n                  var signerKps = signers.filter(function (s) {\n                    return s !== undefined;\n                  });\n                  var signerPubkeys = [_this.wallet.publicKey].concat(signerKps.map(function (s) {\n                    return s.publicKey;\n                  }));\n                  tx.setSigners.apply(tx, _toConsumableArray(signerPubkeys));\n                  tx.recentBlockhash = blockhash.blockhash;\n                  signerKps.forEach(function (kp) {\n                    tx.partialSign(kp);\n                  });\n                  return tx;\n                });\n                _context2.next = 7;\n                return this.wallet.signAllTransactions(txs);\n\n              case 7:\n                signedTxs = _context2.sent;\n                sigs = [];\n                k = 0;\n\n              case 10:\n                if (!(k < txs.length)) {\n                  _context2.next = 32;\n                  break;\n                }\n\n                tx = signedTxs[k];\n                rawTx = tx.serialize();\n                _context2.prev = 13;\n                _context2.t0 = sigs;\n                _context2.next = 17;\n                return web3_js_1.sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n\n              case 17:\n                _context2.t1 = _context2.sent;\n\n                _context2.t0.push.call(_context2.t0, _context2.t1);\n\n                _context2.next = 29;\n                break;\n\n              case 21:\n                _context2.prev = 21;\n                _context2.t2 = _context2[\"catch\"](13);\n                console.error('Transaction failed. Simulating for logs...');\n                _context2.next = 26;\n                return simulate_transaction_1.simulateTransaction(this.connection, tx, (_a = opts.commitment) !== null && _a !== void 0 ? _a : 'recent');\n\n              case 26:\n                r = _context2.sent;\n                console.error(r);\n                throw _context2.t2;\n\n              case 29:\n                k += 1;\n                _context2.next = 10;\n                break;\n\n              case 32:\n                return _context2.abrupt(\"return\", sigs);\n\n              case 33:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[13, 21]]);\n      }));\n\n      function sendAll(_x4, _x5) {\n        return _sendAll.apply(this, arguments);\n      }\n\n      return sendAll;\n    }()\n  }], [{\n    key: \"defaultOptions\",\n    value: function defaultOptions() {\n      return {\n        preflightCommitment: 'recent',\n        commitment: 'recent'\n      };\n    }\n  }, {\n    key: \"local\",\n    value: function local(url, opts) {\n      opts = opts || Provider.defaultOptions();\n      var connection = new web3_js_1.Connection(url || 'http://localhost:8899', opts.preflightCommitment);\n      var wallet = NodeWallet.local();\n      return new Provider(connection, wallet, opts);\n    }\n  }]);\n\n  return Provider;\n}();\n\nexports.Provider = Provider;\n\nvar NodeWallet = /*#__PURE__*/function () {\n  function NodeWallet(payer) {\n    _classCallCheck(this, NodeWallet);\n\n    this.payer = payer;\n  }\n\n  _createClass(NodeWallet, [{\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tx) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                tx.partialSign(this.payer);\n                return _context3.abrupt(\"return\", tx);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function signTransaction(_x6) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n  }, {\n    key: \"signAllTransactions\",\n    value: function () {\n      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(txs) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", txs.map(function (t) {\n                  t.partialSign(_this2.payer);\n                  return t;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function signAllTransactions(_x7) {\n        return _signAllTransactions.apply(this, arguments);\n      }\n\n      return signAllTransactions;\n    }()\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this.payer.publicKey;\n    }\n  }], [{\n    key: \"local\",\n    value: function local() {\n      var payer = new web3_js_1.Account(Buffer.from(JSON.parse(require('fs').readFileSync(require('os').homedir() + '/.config/solana/id.json', {\n        encoding: 'utf-8'\n      }))));\n      return new NodeWallet(payer);\n    }\n  }]);\n\n  return NodeWallet;\n}();\n\nexports.NodeWallet = NodeWallet;","map":null,"metadata":{},"sourceType":"script"}