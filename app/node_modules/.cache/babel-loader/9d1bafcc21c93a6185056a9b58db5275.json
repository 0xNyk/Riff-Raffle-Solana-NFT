{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kroni\\\\Desktop\\\\RIFF RAFFLE SITE PNSC\\\\Riff-Raffle-Solana-NFT\\\\app\\\\src\\\\providers\\\\ProgramApisProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useMemo } from 'react';\nimport { Program } from '@project-serum/anchor';\nimport { useAnchorWallet, useConnection } from '@solana/wallet-adapter-react';\nimport { customProviderFactory } from '../lib/anchorUtils';\nimport DraffleJson from '../lib/idl/draffle.json';\nimport DispenserJson from '../lib/idl/dispenser.json';\nimport { DISPENSER_PROGRAM_ID, DRAFFLE_PROGRAM_ID } from '../config/programIds'; //@ts-ignore\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgramApisContext = /*#__PURE__*/createContext();\n\nconst ProgramApisProvider = ({\n  children\n}) => {\n  _s();\n\n  const {\n    connection\n  } = useConnection();\n  const anchorWallet = useAnchorWallet();\n  const {\n    draffleClient\n  } = useMemo(() => {\n    const draffleClient = new Program(DraffleJson, DRAFFLE_PROGRAM_ID, customProviderFactory(connection, anchorWallet));\n    return {\n      draffleClient\n    };\n  }, [connection, anchorWallet]);\n  const {\n    dispenserClient\n  } = useMemo(() => {\n    const dispenserClient = new Program(DispenserJson, DISPENSER_PROGRAM_ID, customProviderFactory(connection, anchorWallet));\n    return {\n      dispenserClient\n    };\n  }, [connection, anchorWallet]);\n  return /*#__PURE__*/_jsxDEV(ProgramApisContext.Provider, {\n    value: {\n      draffleClient,\n      dispenserClient\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProgramApisProvider, \"1O2I0ERl/fvKrux8Jeozhr3pvnY=\", false, function () {\n  return [useConnection, useAnchorWallet];\n});\n\n_c = ProgramApisProvider;\nexport default ProgramApisProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgramApisProvider\");","map":{"version":3,"sources":["C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT/app/src/providers/ProgramApisProvider.tsx"],"names":["React","createContext","useMemo","Program","useAnchorWallet","useConnection","customProviderFactory","DraffleJson","DispenserJson","DISPENSER_PROGRAM_ID","DRAFFLE_PROGRAM_ID","ProgramApisContext","ProgramApisProvider","children","connection","anchorWallet","draffleClient","dispenserClient"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAAmCC,OAAnC,QAAkD,OAAlD;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,8BAA/C;AACA,SAASC,qBAAT,QAAsC,oBAAtC;AAKA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,QAAyD,sBAAzD,C,CAEA;;;AACA,OAAO,MAAMC,kBAAkB,gBAAGV,aAAa,EAAxC;;AA6BP,MAAMW,mBAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAChD,QAAM;AAAEC,IAAAA;AAAF,MAAiBT,aAAa,EAApC;AACA,QAAMU,YAAY,GAAGX,eAAe,EAApC;AAEA,QAAM;AAAEY,IAAAA;AAAF,MAAoBd,OAAO,CAAC,MAAM;AACtC,UAAMc,aAAa,GAAG,IAAIb,OAAJ,CACpBI,WADoB,EAEpBG,kBAFoB,EAGpBJ,qBAAqB,CAACQ,UAAD,EAAaC,YAAb,CAHD,CAAtB;AAKA,WAAO;AACLC,MAAAA;AADK,KAAP;AAGD,GATgC,EAS9B,CAACF,UAAD,EAAaC,YAAb,CAT8B,CAAjC;AAWA,QAAM;AAAEE,IAAAA;AAAF,MAAsBf,OAAO,CAAC,MAAM;AACxC,UAAMe,eAAe,GAAG,IAAId,OAAJ,CACtBK,aADsB,EAEtBC,oBAFsB,EAGtBH,qBAAqB,CAACQ,UAAD,EAAaC,YAAb,CAHC,CAAxB;AAKA,WAAO;AACLE,MAAAA;AADK,KAAP;AAGD,GATkC,EAShC,CAACH,UAAD,EAAaC,YAAb,CATgC,CAAnC;AAWA,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAApC;AAAA,cACGJ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA/BD;;GAAMD,mB;UACmBP,a,EACFD,e;;;KAFjBQ,mB;AAiCN,eAAeA,mBAAf","sourcesContent":["import React, { createContext, FC, useMemo } from 'react';\r\nimport { Program } from '@project-serum/anchor';\r\nimport { useAnchorWallet, useConnection } from '@solana/wallet-adapter-react';\r\nimport { customProviderFactory } from '../lib/anchorUtils';\r\nimport { AnchorTypes } from '@saberhq/anchor-contrib';\r\n\r\nimport { Draffle as DraffleIdl } from '../lib/idl/draffle';\r\nimport { Dispenser as DispenserIdl } from '../lib/idl/dispenser';\r\nimport DraffleJson from '../lib/idl/draffle.json';\r\nimport DispenserJson from '../lib/idl/dispenser.json';\r\nimport { DISPENSER_PROGRAM_ID, DRAFFLE_PROGRAM_ID } from '../config/programIds';\r\n\r\n//@ts-ignore\r\nexport const ProgramApisContext = createContext<{\r\n  draffleClient: DraffleProgram;\r\n  dispenserClient: DispenserProgram;\r\n}>();\r\n\r\nexport type DraffleTypes = AnchorTypes<\r\n  DraffleIdl,\r\n  {\r\n    raffle: RaffleDataRaw;\r\n    entrants: EntrantsDataRaw;\r\n  }\r\n>;\r\n\r\ntype DraffleAccounts = DraffleTypes['Accounts'];\r\nexport type RaffleDataRaw = DraffleAccounts['raffle'];\r\nexport type EntrantsDataRaw = DraffleAccounts['entrants'];\r\nexport type DraffleProgram = DraffleTypes['Program'];\r\n\r\nexport type DispenserTypes = AnchorTypes<\r\n  DispenserIdl,\r\n  {\r\n    registry: DispenserRegistryRaw;\r\n  }\r\n>;\r\n\r\ntype DispenserAccounts = DispenserTypes['Accounts'];\r\nexport type DispenserRegistryRaw = DispenserAccounts['registry'];\r\nexport type DispenserProgram = DispenserTypes['Program'];\r\n\r\nconst ProgramApisProvider: FC = ({ children }) => {\r\n  const { connection } = useConnection();\r\n  const anchorWallet = useAnchorWallet();\r\n\r\n  const { draffleClient } = useMemo(() => {\r\n    const draffleClient = new Program(\r\n      DraffleJson as DraffleIdl,\r\n      DRAFFLE_PROGRAM_ID,\r\n      customProviderFactory(connection, anchorWallet)\r\n    ) as DraffleProgram;\r\n    return {\r\n      draffleClient,\r\n    };\r\n  }, [connection, anchorWallet]);\r\n\r\n  const { dispenserClient } = useMemo(() => {\r\n    const dispenserClient = new Program(\r\n      DispenserJson as DispenserIdl,\r\n      DISPENSER_PROGRAM_ID,\r\n      customProviderFactory(connection, anchorWallet)\r\n    ) as DispenserProgram;\r\n    return {\r\n      dispenserClient,\r\n    };\r\n  }, [connection, anchorWallet]);\r\n\r\n  return (\r\n    <ProgramApisContext.Provider value={{ draffleClient, dispenserClient }}>\r\n      {children}\r\n    </ProgramApisContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ProgramApisProvider;\r\n"]},"metadata":{},"sourceType":"module"}