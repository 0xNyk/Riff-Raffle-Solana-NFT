{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kroni\\\\Desktop\\\\RIFF RAFFLE SITE PNSC\\\\Riff-Raffle-Solana-NFT\\\\app\\\\src\\\\pages\\\\ExploreRafflesScreen\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport RaffleCard from '../../components/RaffleCard';\nimport { useStyles } from './styles';\nimport { useRafflesStore } from '../../hooks/useRafflesStore';\nimport Screen from '../../components/layout/Screen';\nimport { useViewport } from '../../hooks/useViewport';\nimport FilterBar from './components/FilterBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ExploreRafflesScreen = () => {\n  _s();\n\n  console.log(process.env.NODE_ENV);\n  console.log(process.env.REACT_APP_TESTING);\n  const {\n    device\n  } = useViewport();\n  const classes = useStyles({\n    device\n  });\n  const {\n    publicKey\n  } = useWallet();\n  const {\n    raffles,\n    fetchAllRaffles,\n    fetching\n  } = useRafflesStore();\n  const [showOwnRafflesOnly, setShowOwnRafflesOnly] = useState(false);\n  const [hideEndedRaffles, setHideEndedRaffles] = useState(false);\n  useEffect(fetchAllRaffles, [fetchAllRaffles]);\n  const filterMap = useMemo(() => ({\n    own: raffle => raffle.entrants.has((publicKey === null || publicKey === void 0 ? void 0 : publicKey.toString()) || ''),\n    ongoing: raffle => new Date() < raffle.endTimestamp\n  }), [publicKey]);\n  const rafflesToShow = useMemo(() => {\n    let toShow = [...raffles.values()].sort((raffle1, raffle2) => raffle2.endTimestamp.getTime() - raffle1.endTimestamp.getTime());\n    if (showOwnRafflesOnly) toShow = toShow.filter(filterMap.own);\n    if (hideEndedRaffles) toShow = toShow.filter(filterMap.ongoing);\n    return toShow;\n  }, [raffles, filterMap, showOwnRafflesOnly, hideEndedRaffles]);\n  if (raffles.size === 0 && fetching) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.mainContent,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"secondary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n  if (raffles.size === 0) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h1\",\n      className: classes.titleBar,\n      children: \"More raffles will be coming soon!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: '/PNSCLOGO2.png',\n      alt: 'PNSC LOGO'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n      hideEndedRaffles: hideEndedRaffles,\n      setHideEndedRaffles: setHideEndedRaffles,\n      setShowOwnRafflesOnly: setShowOwnRafflesOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), rafflesToShow.length > 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: 'center',\n      direction: 'row',\n      className: classes.rafflesGrid,\n      children: rafflesToShow.filter(r => r.prizes.length > 0).map(raffle => /*#__PURE__*/_jsxDEV(RaffleCard, {\n        className: classes.raffleCardContainer,\n        raffle: raffle\n      }, raffle.publicKey.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      className: classes.mainContent,\n      children: \"No raffles to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ExploreRafflesScreen, \"REpWQ1aStoHTUlFuBnGzRxPIg+E=\", false, function () {\n  return [useViewport, useStyles, useWallet, useRafflesStore];\n});\n\n_c = ExploreRafflesScreen;\n\nconst ExploreRafflesScreenWithLayout = () => /*#__PURE__*/_jsxDEV(Screen, {\n  children: /*#__PURE__*/_jsxDEV(ExploreRafflesScreen, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 97,\n  columnNumber: 3\n}, this);\n\n_c2 = ExploreRafflesScreenWithLayout;\nexport default ExploreRafflesScreenWithLayout;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ExploreRafflesScreen\");\n$RefreshReg$(_c2, \"ExploreRafflesScreenWithLayout\");","map":{"version":3,"sources":["C:/Users/kroni/Desktop/RIFF RAFFLE SITE PNSC/Riff-Raffle-Solana-NFT/app/src/pages/ExploreRafflesScreen/index.tsx"],"names":["useEffect","useMemo","useState","Grid","Typography","CircularProgress","useWallet","RaffleCard","useStyles","useRafflesStore","Screen","useViewport","FilterBar","ExploreRafflesScreen","console","log","process","env","NODE_ENV","REACT_APP_TESTING","device","classes","publicKey","raffles","fetchAllRaffles","fetching","showOwnRafflesOnly","setShowOwnRafflesOnly","hideEndedRaffles","setHideEndedRaffles","filterMap","own","raffle","entrants","has","toString","ongoing","Date","endTimestamp","rafflesToShow","toShow","values","sort","raffle1","raffle2","getTime","filter","size","mainContent","titleBar","length","rafflesGrid","r","prizes","map","raffleCardContainer","ExploreRafflesScreenWithLayout"],"mappings":"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","sourcesContent":["import { FC, useEffect, useMemo, useState } from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport RaffleCard from '../../components/RaffleCard';\r\nimport { useStyles } from './styles';\r\nimport { useRafflesStore } from '../../hooks/useRafflesStore';\r\nimport Screen from '../../components/layout/Screen';\r\nimport { Raffle } from '../../lib/types';\r\nimport { useViewport } from '../../hooks/useViewport';\r\nimport FilterBar from './components/FilterBar';\r\nimport topLogo from '../../assets/topLogo.gif';\r\n\r\nconst ExploreRafflesScreen: FC = () => {\r\n  console.log(process.env.NODE_ENV);\r\n  console.log(process.env.REACT_APP_TESTING);\r\n  const { device } = useViewport();\r\n  const classes = useStyles({ device });\r\n  const { publicKey } = useWallet();\r\n  const { raffles, fetchAllRaffles, fetching } = useRafflesStore();\r\n  const [showOwnRafflesOnly, setShowOwnRafflesOnly] = useState(false);\r\n  const [hideEndedRaffles, setHideEndedRaffles] = useState(false);\r\n\r\n  useEffect(fetchAllRaffles, [fetchAllRaffles]);\r\n\r\n  const filterMap = useMemo(\r\n    () => ({\r\n      own: (raffle: Raffle) => raffle.entrants.has(publicKey?.toString() || ''),\r\n      ongoing: (raffle: Raffle) => new Date() < raffle.endTimestamp,\r\n    }),\r\n    [publicKey]\r\n  );\r\n\r\n  const rafflesToShow = useMemo(() => {\r\n    let toShow = [...raffles.values()].sort(\r\n      (raffle1, raffle2) =>\r\n        raffle2.endTimestamp.getTime() - raffle1.endTimestamp.getTime()\r\n    );\r\n    if (showOwnRafflesOnly) toShow = toShow.filter(filterMap.own);\r\n    if (hideEndedRaffles) toShow = toShow.filter(filterMap.ongoing);\r\n    return toShow;\r\n  }, [raffles, filterMap, showOwnRafflesOnly, hideEndedRaffles]);\r\n\r\n  if (raffles.size === 0 && fetching)\r\n    return (\r\n      <>\r\n        <div className={classes.mainContent}>\r\n          <CircularProgress color=\"secondary\" />\r\n        </div>\r\n      </>\r\n    );\r\n\r\n  if (raffles.size === 0)\r\n    return (\r\n      <>\r\n        <Typography variant=\"h1\" className={classes.titleBar}>\r\n          More raffles will be coming soon!\r\n        </Typography>\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <img src={'/PNSCLOGO2.png'} alt={'PNSC LOGO'} />\r\n      <FilterBar\r\n        hideEndedRaffles={hideEndedRaffles}\r\n        setHideEndedRaffles={setHideEndedRaffles}\r\n        setShowOwnRafflesOnly={setShowOwnRafflesOnly}\r\n      />\r\n      {rafflesToShow.length > 0 ? (\r\n        <Grid\r\n          container\r\n          justifyContent={'center'}\r\n          direction={'row'}\r\n          className={classes.rafflesGrid}\r\n        >\r\n          {rafflesToShow\r\n            .filter((r) => r.prizes.length > 0)\r\n            .map((raffle) => (\r\n              <RaffleCard\r\n                key={raffle.publicKey.toString()}\r\n                className={classes.raffleCardContainer}\r\n                raffle={raffle}\r\n              />\r\n            ))}\r\n        </Grid>\r\n      ) : (\r\n        <Typography variant=\"h4\" className={classes.mainContent}>\r\n          No raffles to display.\r\n        </Typography>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst ExploreRafflesScreenWithLayout = () => (\r\n  <Screen>\r\n    <ExploreRafflesScreen />\r\n  </Screen>\r\n);\r\n\r\nexport default ExploreRafflesScreenWithLayout;\r\n"]},"metadata":{},"sourceType":"module"}