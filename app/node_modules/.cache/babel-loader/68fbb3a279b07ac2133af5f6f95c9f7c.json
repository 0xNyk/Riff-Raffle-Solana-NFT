{"ast":null,"code":"var _jsxFileName = \"C:\\\\Riff-Raffle-Solana-NFT build 1-1\\\\app\\\\src\\\\pages\\\\RaffleOngoingScreen\\\\components\\\\PurchaseTicketsSection\\\\PurchaseTicket.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { CircularProgress, IconButton, MenuItem, Select, TextField, Typography } from '@material-ui/core';\nimport { sleep } from '@project-serum/common';\nimport { u64 } from '@solana/spl-token';\nimport toast from 'react-hot-toast';\nimport { AddBoxRounded, IndeterminateCheckBoxRounded } from '@material-ui/icons';\nimport { MAX_NUMBER_OF_PARTICIPANTS } from '../../../../config/misc';\nimport { buyTickets, BUY_TICKETS_TX_FEE_LAMPORTS, calculateBasketPrice } from '../../../../lib/actions/buyTickets';\nimport { getDisplayAmount, getBuyerATABalance, getWalletLamports } from '../../../../lib/accounts';\nimport Button from '../../../../components/Button';\nimport useCommonStyles from '../../../../assets/styles';\nimport { tokenInfoMap, wrappedSOL } from '../../../../config/tokenRegistry';\nimport { useProgramApis } from '../../../../hooks/useProgramApis';\nimport { useStyles } from './styles';\nimport { PublicKey } from '@solana/web3.js';\nimport ShortenedString from '../../../../components/ShortenedString';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MAX_TICKET_AMOUNT = 1000;\n\nconst isLamportsEnough = lamports => (lamports !== null && lamports !== void 0 ? lamports : 0) >= BUY_TICKETS_TX_FEE_LAMPORTS;\n\nexport const PurchaseTickets = ({\n  raffle,\n  updateRaffle\n}) => {\n  _s();\n\n  const classes = { ...useCommonStyles(),\n    ...useStyles()\n  };\n  const {\n    draffleClient,\n    dispenserClient\n  } = useProgramApis();\n  const [purchaseOngoing, setPurchaseOngoing] = useState(false);\n  const [walletLamports, setWalletLamports] = useState(); // const [ticketPrice, setTicketPrice] = useState<PaymentOption>({\n  //   mint: raffle.proceeds.mint,\n  //   price: raffle.proceeds.ticketPrice,\n  //   price: raffle.proceeds.ticketPrice,\n  // });\n\n  const nativePaymentOption = useMemo(() => ({\n    mint: raffle.proceeds.mint,\n    dispenserPriceIn: new u64(1),\n    dispenserPriceOut: new u64(1)\n  }), [raffle]);\n  const [paymentOption, setPaymentOption] = useState(nativePaymentOption);\n  const [buyerATABalance, setBuyerATABalance] = useState({\n    mint: raffle.proceeds.mint.publicKey,\n    amount: undefined\n  });\n  const [ticketAmount, setTicketAmount] = useState(1);\n  const [dispensers, setDispensers] = useState([]);\n  const paymentOptions = useMemo(() => (raffle.metadata.alternatePurchaseMints || []).reduce((acc, mintAddress) => {\n    if (!tokenInfoMap.has(mintAddress.toString())) {\n      console.log(`Mint ${mintAddress.toString()} not found in token registry`);\n      return acc;\n    }\n\n    const dispenser = dispensers.find(d => d.account.mintTokenOut.toString() === raffle.proceeds.mint.publicKey.toString() && d.account.mintTokenIn.toString() === mintAddress.toString());\n\n    if (!dispenser) {\n      return acc;\n    }\n\n    const tokenInfo = tokenInfoMap.get(mintAddress.toString());\n    acc.set(mintAddress.toString(), {\n      mint: {\n        name: tokenInfo.name,\n        publicKey: mintAddress,\n        logoUrl: tokenInfo.logoURI,\n        symbol: tokenInfo.symbol,\n        decimals: tokenInfo.decimals\n      },\n      dispenserPriceIn: dispenser.account.rateTokenIn,\n      dispenserPriceOut: dispenser.account.rateTokenOut\n    });\n    return acc;\n  }, new Map([[raffle.proceeds.mint.publicKey.toString(), {\n    mint: raffle.proceeds.mint,\n    dispenserPriceIn: new u64(1),\n    dispenserPriceOut: new u64(1)\n  }]])), [raffle, dispensers]);\n  const getBasketPrice = useCallback(ticketAmount => calculateBasketPrice(raffle.proceeds.ticketPrice, ticketAmount, paymentOption), [raffle.proceeds.ticketPrice, paymentOption]);\n  useEffect(() => {\n    dispenserClient.account.registry.all().then(setDispensers);\n  }, [dispenserClient, setDispensers]);\n  useEffect(() => {\n    var _draffleClient$provid;\n\n    if (!((_draffleClient$provid = draffleClient.provider.wallet) === null || _draffleClient$provid === void 0 ? void 0 : _draffleClient$provid.publicKey)) return;\n    let timerId;\n\n    const updateLamports = async () => {\n      const newWalletLamports = await getWalletLamports(draffleClient.provider);\n      setWalletLamports(newWalletLamports);\n\n      if (isLamportsEnough(walletLamports) && !(paymentOption.mint.publicKey.toBase58() === wrappedSOL)) {\n        clearInterval(timerId);\n      }\n    };\n\n    updateLamports();\n    timerId = setInterval(() => {\n      updateLamports();\n    }, 5000);\n    return () => clearInterval(timerId);\n  }, [walletLamports, draffleClient.provider, draffleClient.provider.wallet.publicKey, paymentOption.mint.publicKey]);\n  useEffect(() => {\n    if (!draffleClient.provider.wallet.publicKey) return;\n\n    async function updateBuyerATABalance() {\n      setBuyerATABalance({\n        mint: paymentOption.mint.publicKey,\n        amount: await getBuyerATABalance(draffleClient.provider, paymentOption.mint.publicKey)\n      });\n    }\n\n    const timerId = setInterval(() => {\n      updateBuyerATABalance();\n    }, 5000);\n    updateBuyerATABalance();\n    return () => clearInterval(timerId);\n  }, [draffleClient.provider, draffleClient.provider.wallet, paymentOption.mint.publicKey]);\n  const lamportsEnough = useMemo(() => isLamportsEnough(walletLamports), [walletLamports]);\n  const buyerTokenBalance = useMemo(() => {\n    return paymentOption.mint.publicKey.toBase58() === wrappedSOL ? {\n      mint: new PublicKey(wrappedSOL),\n      amount: new u64(walletLamports !== null && walletLamports !== void 0 ? walletLamports : 0)\n    } // We ignore the potential wSOL ATA\n    : buyerATABalance;\n  }, [walletLamports, buyerATABalance, paymentOption.mint.publicKey]);\n  const hasEnoughFunds = useMemo(() => {\n    var _buyerTokenBalance$am;\n\n    const tokensEnough = (_buyerTokenBalance$am = buyerTokenBalance.amount) === null || _buyerTokenBalance$am === void 0 ? void 0 : _buyerTokenBalance$am.gte(getBasketPrice(ticketAmount));\n    return tokensEnough && lamportsEnough;\n  }, [buyerTokenBalance, lamportsEnough, ticketAmount, getBasketPrice]);\n  const maxTicketsToBuyable = useMemo(() => {\n    if (!buyerTokenBalance.amount) return new u64(0);\n    const newMax = buyerTokenBalance.amount.mul(paymentOption.dispenserPriceOut).div(paymentOption.dispenserPriceIn).div(raffle.proceeds.ticketPrice);\n    if (paymentOption.mint.publicKey.toString() === buyerTokenBalance.mint.toString() && newMax.ltn(ticketAmount)) setTicketAmount(newMax.toNumber());\n    return newMax;\n  }, [buyerTokenBalance, paymentOption]);\n  useEffect(() => {\n    let newTicketAmount = ticketAmount === 0 ? 1 : ticketAmount;\n    Math.min(ticketAmount, maxTicketsToBuyable.toNumber());\n    setTicketAmount(newTicketAmount);\n  }, [maxTicketsToBuyable, ticketAmount, setTicketAmount]);\n  const hasEnoughFundsToIncrementTicket = useMemo(() => {\n    var _buyerTokenBalance$am2;\n\n    const tokensEnough = (_buyerTokenBalance$am2 = buyerTokenBalance.amount) === null || _buyerTokenBalance$am2 === void 0 ? void 0 : _buyerTokenBalance$am2.gte(getBasketPrice(ticketAmount + 1));\n    return tokensEnough && lamportsEnough;\n  }, [buyerTokenBalance, lamportsEnough, ticketAmount, getBasketPrice]);\n  const onBuyTickets = useCallback(async () => {\n    try {\n      setPurchaseOngoing(true);\n      const buyerATAExists = buyerATABalance.amount !== undefined;\n      await buyTickets(draffleClient, dispenserClient, raffle, ticketAmount, paymentOption, buyerATAExists);\n      setTicketAmount(1);\n      await sleep(500);\n      updateRaffle();\n      toast.success(`You bought ${ticketAmount} ticket(s)`);\n    } catch (error) {\n      if (error.msg) {\n        toast.error(`Transaction failed: ${error.msg}`);\n      } else {\n        toast.error('Unexpected error');\n      }\n    }\n\n    setPurchaseOngoing(false);\n  }, [draffleClient, dispenserClient, raffle, ticketAmount, paymentOption, buyerATABalance, setTicketAmount, updateRaffle]);\n\n  const onSelectPurchaseMint = event => setPaymentOption(paymentOptions.get(event.target.value));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${classes.actionSection} ${classes.root}`,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      className: classes.titleSection,\n      children: \"Purchase Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.amountLabel,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"overline\",\n        children: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.ticketAmountSection,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.ticketAmountSectionLeft,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          onClick: () => setTicketAmount(currentAmount => Math.max(currentAmount - 1, 1)),\n          disabled: ticketAmount <= 1,\n          className: classes.changeTicketAmountButton,\n          children: /*#__PURE__*/_jsxDEV(IndeterminateCheckBoxRounded, {\n            style: {\n              fontSize: 30\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.ticketAmountSectionMiddle,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          size: \"small\",\n          variant: \"outlined\",\n          className: classes.ticketAmountTextField,\n          value: ticketAmount,\n          onChange: event => {\n            const newValue = event.target.value;\n            const re = /^[0-9\\b]+$/;\n            if (newValue !== '' && !re.test(newValue)) return;\n            let numericValue = Math.min(Math.min(Number(newValue), MAX_TICKET_AMOUNT - raffle.totalTickets), maxTicketsToBuyable.toNumber());\n            setTicketAmount(numericValue);\n          },\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              variant: \"text\",\n              disableRipple: true,\n              className: classes.maxButton,\n              onClick: () => {\n                let maxTickets = Math.min(MAX_TICKET_AMOUNT - raffle.totalTickets, maxTicketsToBuyable.toNumber());\n                setTicketAmount(maxTickets);\n              },\n              children: \"MAX\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this),\n            startAdornment: /*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              variant: \"text\",\n              disableRipple: true,\n              className: classes.maxButton,\n              onClick: () => setTicketAmount(1),\n              children: \"MIN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.ticketAmountSectionRight,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          onClick: () => setTicketAmount(currentAmount => currentAmount + 1),\n          disabled: raffle.totalTickets + ticketAmount >= MAX_NUMBER_OF_PARTICIPANTS || !hasEnoughFundsToIncrementTicket || ticketAmount + 1 > MAX_TICKET_AMOUNT - raffle.totalTickets,\n          className: classes.changeTicketAmountButton,\n          children: /*#__PURE__*/_jsxDEV(AddBoxRounded, {\n            style: {\n              fontSize: 30\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.priceSection,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.paymentOptionSection,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.basketPrice,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"overline\",\n            children: \"Total Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              children: getDisplayAmount(getBasketPrice(ticketAmount), paymentOption.mint)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.basketPrice,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"overline\",\n            children: \"Currency\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 13\n          }, this), paymentOptions.size === 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.paymentOptionSelection,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              children: raffle.proceeds.mint.symbol\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.paymentOptionLogoContainer,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: classes.paymentOptionLogo,\n                src: raffle.proceeds.mint.logoUrl,\n                alt: `Logo for ${raffle.proceeds.mint.name}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Select, {\n            variant: \"standard\",\n            label: \"Purchase mint\",\n            value: paymentOption.mint.publicKey.toString(),\n            onChange: onSelectPurchaseMint,\n            className: classes.paymentOptionSelect,\n            MenuProps: {\n              disableScrollLock: true\n            },\n            renderValue: optionKey => {\n              const option = paymentOptions.get(optionKey);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.paymentOptionSelection,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h4\",\n                  children: option.mint.symbol\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 441,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.paymentOptionLogoContainer,\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: classes.paymentOptionLogo,\n                    src: option.mint.logoUrl,\n                    alt: `Logo for ${option.mint.name}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 443,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 21\n              }, this);\n            },\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              disabled: true,\n              children: \"Select purchase currency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 17\n            }, this), [...paymentOptions.values()].map(({\n              mint\n            }) => {\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: mint.publicKey.toString(),\n                classes: {\n                  root: classes.paymentOptionMenu\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.paymentOptionLogoContainer,\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: classes.paymentOptionLogo,\n                    src: mint.logoUrl,\n                    alt: `Logo for ${mint.name}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 464,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  children: [/*#__PURE__*/_jsxDEV(ShortenedString, {\n                    message: mint.name,\n                    maxCharLength: 12\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 471,\n                    columnNumber: 25\n                  }, this), ` (${mint.symbol})`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 470,\n                  columnNumber: 23\n                }, this)]\n              }, mint.publicKey.toString(), true, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buySection,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        className: classes.mainButton,\n        onClick: onBuyTickets,\n        disabled: ticketAmount === 0 || raffle.totalTickets + ticketAmount > MAX_NUMBER_OF_PARTICIPANTS || !hasEnoughFunds || purchaseOngoing,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.purchaseButtonContent,\n          children: purchaseOngoing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.purchaseButtonContentLeft,\n              children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 20,\n                className: classes.purchaseSpinner\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.purchaseButtonContentMiddle,\n              children: \"Processing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.purchaseButtonContentRight\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"Buy ticket \", !lamportsEnough && '(Insufficient SOL)']\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.walletBalance,\n        children: [\"Wallet balance:\", ' ', buyerTokenBalance ? getDisplayAmount(buyerTokenBalance.amount || new u64(0), paymentOption.mint) : 0, ' ', paymentOption.mint.symbol]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PurchaseTickets, \"YBxQm6+o7ogV5ebzlqDIBssyW2c=\", false, function () {\n  return [useCommonStyles, useStyles, useProgramApis];\n});\n\n_c = PurchaseTickets;\n\nvar _c;\n\n$RefreshReg$(_c, \"PurchaseTickets\");","map":{"version":3,"sources":["C:/Riff-Raffle-Solana-NFT build 1-1/app/src/pages/RaffleOngoingScreen/components/PurchaseTicketsSection/PurchaseTicket.tsx"],"names":["useCallback","useEffect","useMemo","useState","CircularProgress","IconButton","MenuItem","Select","TextField","Typography","sleep","u64","toast","AddBoxRounded","IndeterminateCheckBoxRounded","MAX_NUMBER_OF_PARTICIPANTS","buyTickets","BUY_TICKETS_TX_FEE_LAMPORTS","calculateBasketPrice","getDisplayAmount","getBuyerATABalance","getWalletLamports","Button","useCommonStyles","tokenInfoMap","wrappedSOL","useProgramApis","useStyles","PublicKey","ShortenedString","MAX_TICKET_AMOUNT","isLamportsEnough","lamports","PurchaseTickets","raffle","updateRaffle","classes","draffleClient","dispenserClient","purchaseOngoing","setPurchaseOngoing","walletLamports","setWalletLamports","nativePaymentOption","mint","proceeds","dispenserPriceIn","dispenserPriceOut","paymentOption","setPaymentOption","buyerATABalance","setBuyerATABalance","publicKey","amount","undefined","ticketAmount","setTicketAmount","dispensers","setDispensers","paymentOptions","metadata","alternatePurchaseMints","reduce","acc","mintAddress","has","toString","console","log","dispenser","find","d","account","mintTokenOut","mintTokenIn","tokenInfo","get","set","name","logoUrl","logoURI","symbol","decimals","rateTokenIn","rateTokenOut","Map","getBasketPrice","ticketPrice","registry","all","then","provider","wallet","timerId","updateLamports","newWalletLamports","toBase58","clearInterval","setInterval","updateBuyerATABalance","lamportsEnough","buyerTokenBalance","hasEnoughFunds","tokensEnough","gte","maxTicketsToBuyable","newMax","mul","div","ltn","toNumber","newTicketAmount","Math","min","hasEnoughFundsToIncrementTicket","onBuyTickets","buyerATAExists","success","error","msg","onSelectPurchaseMint","event","target","value","actionSection","root","titleSection","amountLabel","ticketAmountSection","ticketAmountSectionLeft","currentAmount","max","changeTicketAmountButton","fontSize","ticketAmountSectionMiddle","ticketAmountTextField","newValue","re","test","numericValue","Number","totalTickets","endAdornment","maxButton","maxTickets","startAdornment","ticketAmountSectionRight","priceSection","paymentOptionSection","basketPrice","height","display","flexDirection","alignItems","size","paymentOptionSelection","paymentOptionLogoContainer","paymentOptionLogo","paymentOptionSelect","disableScrollLock","optionKey","option","values","map","paymentOptionMenu","buySection","mainButton","purchaseButtonContent","purchaseButtonContentLeft","purchaseSpinner","purchaseButtonContentMiddle","purchaseButtonContentRight","walletBalance"],"mappings":"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","sourcesContent":["import {\r\n  ChangeEvent,\r\n  FC,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from 'react';\r\nimport {\r\n  CircularProgress,\r\n  IconButton,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { sleep } from '@project-serum/common';\r\nimport { u64 } from '@solana/spl-token';\r\nimport toast from 'react-hot-toast';\r\nimport {\r\n  AddBoxRounded,\r\n  AddCircleOutline,\r\n  IndeterminateCheckBoxRounded,\r\n  RemoveCircleOutline,\r\n} from '@material-ui/icons';\r\n\r\nimport { MAX_NUMBER_OF_PARTICIPANTS } from '../../../../config/misc';\r\nimport {\r\n  buyTickets,\r\n  BUY_TICKETS_TX_FEE_LAMPORTS,\r\n  calculateBasketPrice,\r\n} from '../../../../lib/actions/buyTickets';\r\nimport { PaymentOption, Raffle } from '../../../../lib/types';\r\nimport {\r\n  getDisplayAmount,\r\n  getBuyerATABalance,\r\n  getWalletLamports,\r\n} from '../../../../lib/accounts';\r\nimport Button from '../../../../components/Button';\r\nimport useCommonStyles from '../../../../assets/styles';\r\nimport { tokenInfoMap, wrappedSOL } from '../../../../config/tokenRegistry';\r\nimport { useProgramApis } from '../../../../hooks/useProgramApis';\r\nimport { useStyles } from './styles';\r\nimport { DispenserRegistryRaw } from '../../../../providers/ProgramApisProvider';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport ShortenedString from '../../../../components/ShortenedString';\r\n\r\nconst MAX_TICKET_AMOUNT = 1000;\r\n\r\nconst isLamportsEnough = (lamports: number | undefined) =>\r\n  (lamports ?? 0) >= BUY_TICKETS_TX_FEE_LAMPORTS;\r\n\r\ninterface AccountBalance {\r\n  mint: PublicKey;\r\n  amount: u64 | undefined;\r\n}\r\n\r\ninterface PurchaseTicketsProps {\r\n  raffle: Raffle;\r\n  updateRaffle: () => void;\r\n}\r\n\r\nexport const PurchaseTickets: FC<PurchaseTicketsProps> = ({\r\n  raffle,\r\n  updateRaffle,\r\n}) => {\r\n  const classes = { ...useCommonStyles(), ...useStyles() };\r\n  const { draffleClient, dispenserClient } = useProgramApis();\r\n\r\n  const [purchaseOngoing, setPurchaseOngoing] = useState(false);\r\n  const [walletLamports, setWalletLamports] = useState<number>();\r\n  // const [ticketPrice, setTicketPrice] = useState<PaymentOption>({\r\n  //   mint: raffle.proceeds.mint,\r\n  //   price: raffle.proceeds.ticketPrice,\r\n  //   price: raffle.proceeds.ticketPrice,\r\n  // });\r\n\r\n  const nativePaymentOption = useMemo(\r\n    () => ({\r\n      mint: raffle.proceeds.mint,\r\n      dispenserPriceIn: new u64(1),\r\n      dispenserPriceOut: new u64(1),\r\n    }),\r\n    [raffle]\r\n  );\r\n  const [paymentOption, setPaymentOption] =\r\n    useState<PaymentOption>(nativePaymentOption);\r\n  const [buyerATABalance, setBuyerATABalance] = useState<AccountBalance>({\r\n    mint: raffle.proceeds.mint.publicKey,\r\n    amount: undefined,\r\n  });\r\n  const [ticketAmount, setTicketAmount] = useState<number>(1);\r\n  const [dispensers, setDispensers] = useState<\r\n    { account: DispenserRegistryRaw; publicKey: PublicKey }[]\r\n  >([]);\r\n\r\n  const paymentOptions = useMemo(\r\n    () =>\r\n      (raffle.metadata.alternatePurchaseMints || []).reduce(\r\n        (acc, mintAddress) => {\r\n          if (!tokenInfoMap.has(mintAddress.toString())) {\r\n            console.log(\r\n              `Mint ${mintAddress.toString()} not found in token registry`\r\n            );\r\n            return acc;\r\n          }\r\n\r\n          const dispenser = dispensers.find(\r\n            (d) =>\r\n              d.account.mintTokenOut.toString() ===\r\n                raffle.proceeds.mint.publicKey.toString() &&\r\n              d.account.mintTokenIn.toString() === mintAddress.toString()\r\n          );\r\n          if (!dispenser) {\r\n            return acc;\r\n          }\r\n\r\n          const tokenInfo = tokenInfoMap.get(mintAddress.toString())!;\r\n          acc.set(mintAddress.toString(), {\r\n            mint: {\r\n              name: tokenInfo.name,\r\n              publicKey: mintAddress,\r\n              logoUrl: tokenInfo.logoURI,\r\n              symbol: tokenInfo.symbol,\r\n              decimals: tokenInfo.decimals,\r\n            },\r\n            dispenserPriceIn: dispenser.account.rateTokenIn,\r\n            dispenserPriceOut: dispenser.account.rateTokenOut,\r\n          });\r\n          return acc;\r\n        },\r\n        new Map<string, PaymentOption>([\r\n          [\r\n            raffle.proceeds.mint.publicKey.toString(),\r\n            {\r\n              mint: raffle.proceeds.mint,\r\n              dispenserPriceIn: new u64(1),\r\n              dispenserPriceOut: new u64(1),\r\n            },\r\n          ],\r\n        ])\r\n      ),\r\n    [raffle, dispensers]\r\n  );\r\n\r\n  const getBasketPrice = useCallback(\r\n    (ticketAmount: number) =>\r\n      calculateBasketPrice(\r\n        raffle.proceeds.ticketPrice,\r\n        ticketAmount,\r\n        paymentOption\r\n      ),\r\n    [raffle.proceeds.ticketPrice, paymentOption]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispenserClient.account.registry.all().then(setDispensers);\r\n  }, [dispenserClient, setDispensers]);\r\n\r\n  useEffect(() => {\r\n    if (!draffleClient.provider.wallet?.publicKey) return;\r\n    let timerId: ReturnType<typeof setInterval>;\r\n\r\n    const updateLamports = async () => {\r\n      const newWalletLamports = await getWalletLamports(draffleClient.provider);\r\n      setWalletLamports(newWalletLamports);\r\n      if (\r\n        isLamportsEnough(walletLamports) &&\r\n        !(paymentOption.mint.publicKey.toBase58() === wrappedSOL)\r\n      ) {\r\n        clearInterval(timerId);\r\n      }\r\n    };\r\n\r\n    updateLamports();\r\n    timerId = setInterval(() => {\r\n      updateLamports();\r\n    }, 5000);\r\n    return () => clearInterval(timerId);\r\n  }, [\r\n    walletLamports,\r\n    draffleClient.provider,\r\n    draffleClient.provider.wallet.publicKey,\r\n    paymentOption.mint.publicKey,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!draffleClient.provider.wallet.publicKey) return;\r\n    async function updateBuyerATABalance() {\r\n      setBuyerATABalance({\r\n        mint: paymentOption.mint.publicKey,\r\n        amount: await getBuyerATABalance(\r\n          draffleClient.provider,\r\n          paymentOption.mint.publicKey\r\n        ),\r\n      });\r\n    }\r\n    const timerId = setInterval(() => {\r\n      updateBuyerATABalance();\r\n    }, 5000);\r\n    updateBuyerATABalance();\r\n    return () => clearInterval(timerId);\r\n  }, [\r\n    draffleClient.provider,\r\n    draffleClient.provider.wallet,\r\n    paymentOption.mint.publicKey,\r\n  ]);\r\n\r\n  const lamportsEnough = useMemo(\r\n    () => isLamportsEnough(walletLamports),\r\n    [walletLamports]\r\n  );\r\n  const buyerTokenBalance = useMemo(() => {\r\n    return paymentOption.mint.publicKey.toBase58() === wrappedSOL\r\n      ? {\r\n          mint: new PublicKey(wrappedSOL),\r\n          amount: new u64(walletLamports ?? 0),\r\n        } // We ignore the potential wSOL ATA\r\n      : buyerATABalance;\r\n  }, [walletLamports, buyerATABalance, paymentOption.mint.publicKey]);\r\n\r\n  const hasEnoughFunds = useMemo(() => {\r\n    const tokensEnough = buyerTokenBalance.amount?.gte(\r\n      getBasketPrice(ticketAmount)\r\n    );\r\n    return tokensEnough && lamportsEnough;\r\n  }, [buyerTokenBalance, lamportsEnough, ticketAmount, getBasketPrice]);\r\n\r\n  const maxTicketsToBuyable = useMemo(() => {\r\n    if (!buyerTokenBalance.amount) return new u64(0);\r\n    const newMax = buyerTokenBalance.amount\r\n      .mul(paymentOption.dispenserPriceOut)\r\n      .div(paymentOption.dispenserPriceIn)\r\n      .div(raffle.proceeds.ticketPrice);\r\n\r\n    if (\r\n      paymentOption.mint.publicKey.toString() ===\r\n        buyerTokenBalance.mint.toString() &&\r\n      newMax.ltn(ticketAmount)\r\n    )\r\n      setTicketAmount(newMax.toNumber());\r\n    return newMax;\r\n  }, [buyerTokenBalance, paymentOption]);\r\n\r\n  useEffect(() => {\r\n    let newTicketAmount = ticketAmount === 0 ? 1 : ticketAmount;\r\n    Math.min(ticketAmount, maxTicketsToBuyable.toNumber());\r\n    setTicketAmount(newTicketAmount);\r\n  }, [maxTicketsToBuyable, ticketAmount, setTicketAmount]);\r\n\r\n  const hasEnoughFundsToIncrementTicket = useMemo(() => {\r\n    const tokensEnough = buyerTokenBalance.amount?.gte(\r\n      getBasketPrice(ticketAmount + 1)\r\n    );\r\n    return tokensEnough && lamportsEnough;\r\n  }, [buyerTokenBalance, lamportsEnough, ticketAmount, getBasketPrice]);\r\n\r\n  const onBuyTickets = useCallback(async () => {\r\n    try {\r\n      setPurchaseOngoing(true);\r\n      const buyerATAExists = buyerATABalance.amount !== undefined;\r\n      await buyTickets(\r\n        draffleClient,\r\n        dispenserClient,\r\n        raffle,\r\n        ticketAmount,\r\n        paymentOption,\r\n        buyerATAExists\r\n      );\r\n      setTicketAmount(1);\r\n      await sleep(500);\r\n      updateRaffle();\r\n      toast.success(`You bought ${ticketAmount} ticket(s)`);\r\n    } catch (error: any) {\r\n      if (error.msg) {\r\n        toast.error(`Transaction failed: ${error.msg}`);\r\n      } else {\r\n        toast.error('Unexpected error');\r\n      }\r\n    }\r\n    setPurchaseOngoing(false);\r\n  }, [\r\n    draffleClient,\r\n    dispenserClient,\r\n    raffle,\r\n    ticketAmount,\r\n    paymentOption,\r\n    buyerATABalance,\r\n    setTicketAmount,\r\n    updateRaffle,\r\n  ]);\r\n\r\n  const onSelectPurchaseMint = (\r\n    event: ChangeEvent<{\r\n      name?: string | undefined;\r\n      value: unknown;\r\n    }>\r\n  ) => setPaymentOption(paymentOptions.get(event.target.value as string)!);\r\n\r\n  return (\r\n    <div className={`${classes.actionSection} ${classes.root}`}>\r\n      <Typography variant=\"h3\" className={classes.titleSection}>\r\n        Purchase Tickets\r\n      </Typography>\r\n      <div className={classes.amountLabel}>\r\n        <Typography variant=\"overline\">Amount</Typography>\r\n      </div>\r\n      <div className={classes.ticketAmountSection}>\r\n        <div className={classes.ticketAmountSectionLeft}>\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={() =>\r\n              setTicketAmount((currentAmount) => Math.max(currentAmount - 1, 1))\r\n            }\r\n            disabled={ticketAmount <= 1}\r\n            className={classes.changeTicketAmountButton}\r\n          >\r\n            <IndeterminateCheckBoxRounded style={{ fontSize: 30 }} />\r\n          </IconButton>\r\n        </div>\r\n        <div className={classes.ticketAmountSectionMiddle}>\r\n          <TextField\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            className={classes.ticketAmountTextField}\r\n            value={ticketAmount}\r\n            onChange={(event) => {\r\n              const newValue = event.target.value;\r\n              const re = /^[0-9\\b]+$/;\r\n              if (newValue !== '' && !re.test(newValue)) return;\r\n\r\n              let numericValue = Math.min(\r\n                Math.min(\r\n                  Number(newValue),\r\n                  MAX_TICKET_AMOUNT - raffle.totalTickets\r\n                ),\r\n                maxTicketsToBuyable.toNumber()\r\n              );\r\n\r\n              setTicketAmount(numericValue);\r\n            }}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <Button\r\n                  size=\"small\"\r\n                  variant=\"text\"\r\n                  disableRipple\r\n                  className={classes.maxButton}\r\n                  onClick={() => {\r\n                    let maxTickets = Math.min(\r\n                      MAX_TICKET_AMOUNT - raffle.totalTickets,\r\n                      maxTicketsToBuyable.toNumber()\r\n                    );\r\n                    setTicketAmount(maxTickets);\r\n                  }}\r\n                >\r\n                  MAX\r\n                </Button>\r\n              ),\r\n              startAdornment: (\r\n                <Button\r\n                  size=\"small\"\r\n                  variant=\"text\"\r\n                  disableRipple\r\n                  className={classes.maxButton}\r\n                  onClick={() => setTicketAmount(1)}\r\n                >\r\n                  MIN\r\n                </Button>\r\n              ),\r\n            }}\r\n          />\r\n        </div>\r\n        <div className={classes.ticketAmountSectionRight}>\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={() =>\r\n              setTicketAmount((currentAmount) => currentAmount + 1)\r\n            }\r\n            disabled={\r\n              raffle.totalTickets + ticketAmount >=\r\n                MAX_NUMBER_OF_PARTICIPANTS ||\r\n              !hasEnoughFundsToIncrementTicket ||\r\n              ticketAmount + 1 > MAX_TICKET_AMOUNT - raffle.totalTickets\r\n            }\r\n            className={classes.changeTicketAmountButton}\r\n          >\r\n            <AddBoxRounded style={{ fontSize: 30 }} />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className={classes.priceSection}>\r\n        <div className={classes.paymentOptionSection}>\r\n          <div className={classes.basketPrice}>\r\n            <Typography variant=\"overline\">Total Price</Typography>\r\n            <div\r\n              style={{\r\n                height: '100%',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Typography variant=\"h4\">\r\n                {getDisplayAmount(\r\n                  getBasketPrice(ticketAmount),\r\n                  paymentOption.mint\r\n                )}\r\n              </Typography>\r\n            </div>\r\n          </div>\r\n          <div className={classes.basketPrice}>\r\n            <Typography variant=\"overline\">Currency</Typography>\r\n            {paymentOptions.size === 1 ? (\r\n              <div className={classes.paymentOptionSelection}>\r\n                <Typography variant=\"h4\">\r\n                  {raffle.proceeds.mint.symbol}\r\n                </Typography>\r\n                <div className={classes.paymentOptionLogoContainer}>\r\n                  <img\r\n                    className={classes.paymentOptionLogo}\r\n                    src={raffle.proceeds.mint.logoUrl}\r\n                    alt={`Logo for ${raffle.proceeds.mint.name}`}\r\n                  />\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <Select\r\n                variant=\"standard\"\r\n                label=\"Purchase mint\"\r\n                value={paymentOption.mint.publicKey.toString()}\r\n                onChange={onSelectPurchaseMint}\r\n                className={classes.paymentOptionSelect}\r\n                MenuProps={{\r\n                  disableScrollLock: true,\r\n                }}\r\n                renderValue={(optionKey) => {\r\n                  const option = paymentOptions.get(optionKey as string)!;\r\n                  return (\r\n                    <div className={classes.paymentOptionSelection}>\r\n                      <Typography variant=\"h4\">{option.mint.symbol}</Typography>\r\n                      <div className={classes.paymentOptionLogoContainer}>\r\n                        <img\r\n                          className={classes.paymentOptionLogo}\r\n                          src={option.mint.logoUrl}\r\n                          alt={`Logo for ${option.mint.name}`}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                }}\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  Select purchase currency\r\n                </MenuItem>\r\n                {[...paymentOptions.values()].map(({ mint }) => {\r\n                  return (\r\n                    <MenuItem\r\n                      key={mint.publicKey.toString()}\r\n                      value={mint.publicKey.toString()}\r\n                      classes={{ root: classes.paymentOptionMenu }}\r\n                    >\r\n                      <div className={classes.paymentOptionLogoContainer}>\r\n                        <img\r\n                          className={classes.paymentOptionLogo}\r\n                          src={mint.logoUrl}\r\n                          alt={`Logo for ${mint.name}`}\r\n                        />\r\n                      </div>\r\n                      <Typography variant=\"body1\">\r\n                        <ShortenedString\r\n                          message={mint.name}\r\n                          maxCharLength={12}\r\n                        />\r\n                        {` (${mint.symbol})`}\r\n                      </Typography>\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </Select>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={classes.buySection}>\r\n        <Button\r\n          variant=\"contained\"\r\n          className={classes.mainButton}\r\n          onClick={onBuyTickets}\r\n          disabled={\r\n            ticketAmount === 0 ||\r\n            raffle.totalTickets + ticketAmount > MAX_NUMBER_OF_PARTICIPANTS ||\r\n            !hasEnoughFunds ||\r\n            purchaseOngoing\r\n          }\r\n        >\r\n          <div className={classes.purchaseButtonContent}>\r\n            {purchaseOngoing ? (\r\n              <>\r\n                <div className={classes.purchaseButtonContentLeft}>\r\n                  <CircularProgress\r\n                    size={20}\r\n                    className={classes.purchaseSpinner}\r\n                  />\r\n                </div>\r\n                <div className={classes.purchaseButtonContentMiddle}>\r\n                  Processing...\r\n                </div>\r\n                <div className={classes.purchaseButtonContentRight} />\r\n              </>\r\n            ) : (\r\n              <>Buy ticket {!lamportsEnough && '(Insufficient SOL)'}</>\r\n            )}\r\n          </div>\r\n        </Button>\r\n        <div className={classes.walletBalance}>\r\n          Wallet balance:{' '}\r\n          {buyerTokenBalance\r\n            ? getDisplayAmount(\r\n                buyerTokenBalance.amount || new u64(0),\r\n                paymentOption.mint\r\n              )\r\n            : 0}{' '}\r\n          {paymentOption.mint.symbol}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}